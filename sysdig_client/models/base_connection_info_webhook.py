# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.key_value_object import KeyValueObject
from typing import Optional, Set
from typing_extensions import Self

class BaseConnectionInfoWebhook(BaseModel):
    """
    BaseConnectionInfoWebhook
    """ # noqa: E501
    endpoint: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Webhook endpoint following the schema protocol")
    is_insecure: Optional[StrictBool] = Field(default=False, description="Skip TLS certificate verification", alias="isInsecure")
    headers: Optional[Annotated[List[KeyValueObject], Field(max_length=256)]] = Field(default=None, description="Extra headers to add to the request. Each header mapping requires 2 keys: 'key' for the header key and 'value' for its value")
    output: Optional[StrictStr] = Field(default='json', description="Payload format")
    timestamp_format: Optional[StrictStr] = Field(default='nanoseconds', description="The resolution of the \"timestamp\" field in the payload", alias="timestampFormat")
    auth: Optional[StrictStr] = Field(default=None, description="Authentication method")
    certificate_id: Optional[Annotated[int, Field(le=9223372036854775616, strict=True, ge=1)]] = Field(default=None, description="ID of a certificate stored in Sysdig's [Certificates Management tool](#tag/Certificates). Note that the RFC 5425 (TLS) protocol is required for you to see this field", alias="certificateId")
    __properties: ClassVar[List[str]] = ["endpoint", "isInsecure", "headers", "output", "timestampFormat", "auth", "certificateId"]

    @field_validator('output')
    def output_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['json', 'ndjson']):
            raise ValueError("must be one of enum values ('json', 'ndjson')")
        return value

    @field_validator('timestamp_format')
    def timestamp_format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['seconds', 'milliseconds', 'microseconds', 'nanoseconds']):
            raise ValueError("must be one of enum values ('seconds', 'milliseconds', 'microseconds', 'nanoseconds')")
        return value

    @field_validator('auth')
    def auth_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['BASIC_AUTH', 'BEARER_TOKEN', 'SIGNATURE', 'CERTIFICATE']):
            raise ValueError("must be one of enum values ('BASIC_AUTH', 'BEARER_TOKEN', 'SIGNATURE', 'CERTIFICATE')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BaseConnectionInfoWebhook from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BaseConnectionInfoWebhook from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpoint": obj.get("endpoint"),
            "isInsecure": obj.get("isInsecure") if obj.get("isInsecure") is not None else False,
            "headers": [KeyValueObject.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "output": obj.get("output") if obj.get("output") is not None else 'json',
            "timestampFormat": obj.get("timestampFormat") if obj.get("timestampFormat") is not None else 'nanoseconds',
            "auth": obj.get("auth"),
            "certificateId": obj.get("certificateId")
        })
        return _obj


