# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.issue_type_field_response_v1 import IssueTypeFieldResponseV1
from typing import Optional, Set
from typing_extensions import Self

class IssueTypeResponseV1(BaseModel):
    """
    IssueTypeResponseV1
    """ # noqa: E501
    id: Annotated[int, Field(strict=True, ge=0)] = Field(description="Issue type ID.")
    jira_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Issue type ID on Jira.", alias="jiraId")
    jira_name: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira issue type name.", alias="jiraName")
    jira_hierarchy_level: Annotated[int, Field(le=2147483647, strict=True, ge=1)] = Field(description="Issue type hierarchy level on Jira.", alias="jiraHierarchyLevel")
    jira_open_status_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira status ID mapped to open status.", alias="jiraOpenStatusId")
    jira_in_progress_status_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira status ID mapped to in progress status.", alias="jiraInProgressStatusId")
    jira_closed_status_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira status ID mapped to closed status.", alias="jiraClosedStatusId")
    standard_fields: Annotated[List[IssueTypeFieldResponseV1], Field(max_length=500)] = Field(description="Standard fields for the issue type.", alias="standardFields")
    custom_fields: Optional[Annotated[List[IssueTypeFieldResponseV1], Field(max_length=500)]] = Field(default=None, description="Custom fields for the issue type.", alias="customFields")
    __properties: ClassVar[List[str]] = ["id", "jiraId", "jiraName", "jiraHierarchyLevel", "jiraOpenStatusId", "jiraInProgressStatusId", "jiraClosedStatusId", "standardFields", "customFields"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueTypeResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in standard_fields (list)
        _items = []
        if self.standard_fields:
            for _item_standard_fields in self.standard_fields:
                if _item_standard_fields:
                    _items.append(_item_standard_fields.to_dict())
            _dict['standardFields'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in custom_fields (list)
        _items = []
        if self.custom_fields:
            for _item_custom_fields in self.custom_fields:
                if _item_custom_fields:
                    _items.append(_item_custom_fields.to_dict())
            _dict['customFields'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueTypeResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "jiraId": obj.get("jiraId"),
            "jiraName": obj.get("jiraName"),
            "jiraHierarchyLevel": obj.get("jiraHierarchyLevel"),
            "jiraOpenStatusId": obj.get("jiraOpenStatusId"),
            "jiraInProgressStatusId": obj.get("jiraInProgressStatusId"),
            "jiraClosedStatusId": obj.get("jiraClosedStatusId"),
            "standardFields": [IssueTypeFieldResponseV1.from_dict(_item) for _item in obj["standardFields"]] if obj.get("standardFields") is not None else None,
            "customFields": [IssueTypeFieldResponseV1.from_dict(_item) for _item in obj["customFields"]] if obj.get("customFields") is not None else None
        })
        return _obj


