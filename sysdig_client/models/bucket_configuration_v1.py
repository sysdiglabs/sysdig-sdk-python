# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class BucketConfigurationV1(BaseModel):
    """
    BucketConfigurationV1
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="The name of the bucket.")
    folder: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The folder in the bucket where the captures are stored. Name of the folder without any prefix slashes (\"test-folder\" and not \"/test-folder\").")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The description of the bucket.")
    provider_key_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Id of the configured cloud provider account. Could be fetched with /api/providers endpoint.", alias="providerKeyId")
    endpoint: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The endpoint of the bucket. ***Required for S3 compatible storage.***")
    region: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The region of the bucket.")
    path_style_access: Optional[StrictBool] = Field(default=False, description="Specifies if the bucket uses path-style access.", alias="pathStyleAccess")
    __properties: ClassVar[List[str]] = ["name", "folder", "description", "providerKeyId", "endpoint", "region", "pathStyleAccess"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of BucketConfigurationV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if provider_key_id (nullable) is None
        # and model_fields_set contains the field
        if self.provider_key_id is None and "provider_key_id" in self.model_fields_set:
            _dict['providerKeyId'] = None

        # set to None if endpoint (nullable) is None
        # and model_fields_set contains the field
        if self.endpoint is None and "endpoint" in self.model_fields_set:
            _dict['endpoint'] = None

        # set to None if region (nullable) is None
        # and model_fields_set contains the field
        if self.region is None and "region" in self.model_fields_set:
            _dict['region'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of BucketConfigurationV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "folder": obj.get("folder"),
            "description": obj.get("description"),
            "providerKeyId": obj.get("providerKeyId"),
            "endpoint": obj.get("endpoint"),
            "region": obj.get("region"),
            "pathStyleAccess": obj.get("pathStyleAccess") if obj.get("pathStyleAccess") is not None else False
        })
        return _obj


