# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class RoleResponseV1(BaseModel):
    """
    Create role response
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    description: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Describes the role")
    monitor_permissions: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=255)]], Field(max_length=100)]] = Field(default=None, description="Set of Monitor permissions assigned to the role.  Check GET /platform/v1/permissions to obtain the list of available values. ", alias="monitorPermissions")
    secure_permissions: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=255)]], Field(max_length=100)]] = Field(default=None, description="Set of Secure permissions assigned to the role.  Check GET /platform/v1/permissions to obtain the list of available values. ", alias="securePermissions")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="The display name of the role")
    __properties: ClassVar[List[str]] = ["id", "description", "monitorPermissions", "securePermissions", "name"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RoleResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RoleResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "description": obj.get("description"),
            "monitorPermissions": obj.get("monitorPermissions"),
            "securePermissions": obj.get("securePermissions"),
            "name": obj.get("name")
        })
        return _obj


