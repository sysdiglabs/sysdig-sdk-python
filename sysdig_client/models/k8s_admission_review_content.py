# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.event_content_type import EventContentType
from sysdig_client.models.k8s_admission_review_content_all_of_scan_result import K8sAdmissionReviewContentAllOfScanResult
from sysdig_client.models.zone import Zone
from typing import Optional, Set
from typing_extensions import Self

class K8sAdmissionReviewContent(BaseModel):
    """
    Kubernetes admission requests-posture checks event content
    """ # noqa: E501
    type: EventContentType
    namespace: Optional[Annotated[str, Field(strict=True, max_length=253)]] = Field(default=None, description="Kubernetes namespace")
    cluster_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Kubernetes cluster name", alias="clusterName")
    resource_name: Optional[Annotated[str, Field(strict=True, max_length=253)]] = Field(default=None, description="Kubernetes resource name", alias="resourceName")
    resource_kind: Optional[Annotated[str, Field(strict=True, max_length=63)]] = Field(default=None, description="Kubernetes resource kind", alias="resourceKind")
    zones: Optional[Annotated[List[Zone], Field(max_length=1000)]] = Field(default=None, description="List of zones that match the scope of the resource.")
    scan_result: K8sAdmissionReviewContentAllOfScanResult = Field(alias="scanResult")
    __properties: ClassVar[List[str]] = ["type", "namespace", "clusterName", "resourceName", "resourceKind", "zones", "scanResult"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of K8sAdmissionReviewContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in zones (list)
        _items = []
        if self.zones:
            for _item_zones in self.zones:
                if _item_zones:
                    _items.append(_item_zones.to_dict())
            _dict['zones'] = _items
        # override the default output from pydantic by calling `to_dict()` of scan_result
        if self.scan_result:
            _dict['scanResult'] = self.scan_result.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of K8sAdmissionReviewContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "namespace": obj.get("namespace"),
            "clusterName": obj.get("clusterName"),
            "resourceName": obj.get("resourceName"),
            "resourceKind": obj.get("resourceKind"),
            "zones": [Zone.from_dict(_item) for _item in obj["zones"]] if obj.get("zones") is not None else None,
            "scanResult": K8sAdmissionReviewContentAllOfScanResult.from_dict(obj["scanResult"]) if obj.get("scanResult") is not None else None
        })
        return _obj


