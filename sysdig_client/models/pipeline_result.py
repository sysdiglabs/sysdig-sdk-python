# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.policy_evaluation_result import PolicyEvaluationResult
from sysdig_client.models.vuln_total_by_severity import VulnTotalBySeverity
from typing import Optional, Set
from typing_extensions import Self

class PipelineResult(BaseModel):
    """
    pipeline result
    """ # noqa: E501
    policy_evaluation_result: Optional[PolicyEvaluationResult] = Field(default=None, alias="policyEvaluationResult")
    result_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Identifier of the scan result", alias="resultId")
    pull_string: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="image pull string", alias="pullString")
    vuln_total_by_severity: Optional[VulnTotalBySeverity] = Field(default=None, alias="vulnTotalBySeverity")
    image_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Identifier of the image (hash).", alias="imageId")
    created_at: Optional[Annotated[str, Field(strict=True, max_length=100)]] = Field(default=None, description="datetime of creation", alias="createdAt")
    __properties: ClassVar[List[str]] = ["policyEvaluationResult", "resultId", "pullString", "vulnTotalBySeverity", "imageId", "createdAt"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of PipelineResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vuln_total_by_severity
        if self.vuln_total_by_severity:
            _dict['vulnTotalBySeverity'] = self.vuln_total_by_severity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of PipelineResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "policyEvaluationResult": obj.get("policyEvaluationResult"),
            "resultId": obj.get("resultId"),
            "pullString": obj.get("pullString"),
            "vulnTotalBySeverity": VulnTotalBySeverity.from_dict(obj["vulnTotalBySeverity"]) if obj.get("vulnTotalBySeverity") is not None else None,
            "imageId": obj.get("imageId"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


