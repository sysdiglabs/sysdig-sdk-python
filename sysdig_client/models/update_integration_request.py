# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sysdig_client.models.update_amazon_sqs_integration_request import UpdateAmazonSqsIntegrationRequest
from sysdig_client.models.update_chronicle_integration_request import UpdateChronicleIntegrationRequest
from sysdig_client.models.update_elasticsearch_integration_request import UpdateElasticsearchIntegrationRequest
from sysdig_client.models.update_google_pub_sub_integration_request import UpdateGooglePubSubIntegrationRequest
from sysdig_client.models.update_google_scc_integration_request import UpdateGoogleSccIntegrationRequest
from sysdig_client.models.update_kafka_integration_request import UpdateKafkaIntegrationRequest
from sysdig_client.models.update_mcm_integration_request import UpdateMcmIntegrationRequest
from sysdig_client.models.update_microsoft_sentinel_integration_request import UpdateMicrosoftSentinelIntegrationRequest
from sysdig_client.models.update_qradar_integration_request import UpdateQradarIntegrationRequest
from sysdig_client.models.update_splunk_integration_request import UpdateSplunkIntegrationRequest
from sysdig_client.models.update_syslog_integration_request import UpdateSyslogIntegrationRequest
from sysdig_client.models.update_webhook_integration_request import UpdateWebhookIntegrationRequest
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

UPDATEINTEGRATIONREQUEST_ONE_OF_SCHEMAS = ["UpdateAmazonSqsIntegrationRequest", "UpdateChronicleIntegrationRequest", "UpdateElasticsearchIntegrationRequest", "UpdateGooglePubSubIntegrationRequest", "UpdateGoogleSccIntegrationRequest", "UpdateKafkaIntegrationRequest", "UpdateMcmIntegrationRequest", "UpdateMicrosoftSentinelIntegrationRequest", "UpdateQradarIntegrationRequest", "UpdateSplunkIntegrationRequest", "UpdateSyslogIntegrationRequest", "UpdateWebhookIntegrationRequest"]

class UpdateIntegrationRequest(BaseModel):
    """
    Update Integration Request
    """
    # data type: UpdateChronicleIntegrationRequest
    oneof_schema_1_validator: Optional[UpdateChronicleIntegrationRequest] = None
    # data type: UpdateElasticsearchIntegrationRequest
    oneof_schema_2_validator: Optional[UpdateElasticsearchIntegrationRequest] = None
    # data type: UpdateGooglePubSubIntegrationRequest
    oneof_schema_3_validator: Optional[UpdateGooglePubSubIntegrationRequest] = None
    # data type: UpdateKafkaIntegrationRequest
    oneof_schema_4_validator: Optional[UpdateKafkaIntegrationRequest] = None
    # data type: UpdateMcmIntegrationRequest
    oneof_schema_5_validator: Optional[UpdateMcmIntegrationRequest] = None
    # data type: UpdateQradarIntegrationRequest
    oneof_schema_6_validator: Optional[UpdateQradarIntegrationRequest] = None
    # data type: UpdateGoogleSccIntegrationRequest
    oneof_schema_7_validator: Optional[UpdateGoogleSccIntegrationRequest] = None
    # data type: UpdateMicrosoftSentinelIntegrationRequest
    oneof_schema_8_validator: Optional[UpdateMicrosoftSentinelIntegrationRequest] = None
    # data type: UpdateSplunkIntegrationRequest
    oneof_schema_9_validator: Optional[UpdateSplunkIntegrationRequest] = None
    # data type: UpdateAmazonSqsIntegrationRequest
    oneof_schema_10_validator: Optional[UpdateAmazonSqsIntegrationRequest] = None
    # data type: UpdateSyslogIntegrationRequest
    oneof_schema_11_validator: Optional[UpdateSyslogIntegrationRequest] = None
    # data type: UpdateWebhookIntegrationRequest
    oneof_schema_12_validator: Optional[UpdateWebhookIntegrationRequest] = None
    actual_instance: Optional[Union[UpdateAmazonSqsIntegrationRequest, UpdateChronicleIntegrationRequest, UpdateElasticsearchIntegrationRequest, UpdateGooglePubSubIntegrationRequest, UpdateGoogleSccIntegrationRequest, UpdateKafkaIntegrationRequest, UpdateMcmIntegrationRequest, UpdateMicrosoftSentinelIntegrationRequest, UpdateQradarIntegrationRequest, UpdateSplunkIntegrationRequest, UpdateSyslogIntegrationRequest, UpdateWebhookIntegrationRequest]] = None
    one_of_schemas: Set[str] = { "UpdateAmazonSqsIntegrationRequest", "UpdateChronicleIntegrationRequest", "UpdateElasticsearchIntegrationRequest", "UpdateGooglePubSubIntegrationRequest", "UpdateGoogleSccIntegrationRequest", "UpdateKafkaIntegrationRequest", "UpdateMcmIntegrationRequest", "UpdateMicrosoftSentinelIntegrationRequest", "UpdateQradarIntegrationRequest", "UpdateSplunkIntegrationRequest", "UpdateSyslogIntegrationRequest", "UpdateWebhookIntegrationRequest" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = UpdateIntegrationRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: UpdateChronicleIntegrationRequest
        if not isinstance(v, UpdateChronicleIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateChronicleIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateElasticsearchIntegrationRequest
        if not isinstance(v, UpdateElasticsearchIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateElasticsearchIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateGooglePubSubIntegrationRequest
        if not isinstance(v, UpdateGooglePubSubIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateGooglePubSubIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateKafkaIntegrationRequest
        if not isinstance(v, UpdateKafkaIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateKafkaIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateMcmIntegrationRequest
        if not isinstance(v, UpdateMcmIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateMcmIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateQradarIntegrationRequest
        if not isinstance(v, UpdateQradarIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateQradarIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateGoogleSccIntegrationRequest
        if not isinstance(v, UpdateGoogleSccIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateGoogleSccIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateMicrosoftSentinelIntegrationRequest
        if not isinstance(v, UpdateMicrosoftSentinelIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateMicrosoftSentinelIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateSplunkIntegrationRequest
        if not isinstance(v, UpdateSplunkIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateSplunkIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateAmazonSqsIntegrationRequest
        if not isinstance(v, UpdateAmazonSqsIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateAmazonSqsIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateSyslogIntegrationRequest
        if not isinstance(v, UpdateSyslogIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateSyslogIntegrationRequest`")
        else:
            match += 1
        # validate data type: UpdateWebhookIntegrationRequest
        if not isinstance(v, UpdateWebhookIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `UpdateWebhookIntegrationRequest`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in UpdateIntegrationRequest with oneOf schemas: UpdateAmazonSqsIntegrationRequest, UpdateChronicleIntegrationRequest, UpdateElasticsearchIntegrationRequest, UpdateGooglePubSubIntegrationRequest, UpdateGoogleSccIntegrationRequest, UpdateKafkaIntegrationRequest, UpdateMcmIntegrationRequest, UpdateMicrosoftSentinelIntegrationRequest, UpdateQradarIntegrationRequest, UpdateSplunkIntegrationRequest, UpdateSyslogIntegrationRequest, UpdateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in UpdateIntegrationRequest with oneOf schemas: UpdateAmazonSqsIntegrationRequest, UpdateChronicleIntegrationRequest, UpdateElasticsearchIntegrationRequest, UpdateGooglePubSubIntegrationRequest, UpdateGoogleSccIntegrationRequest, UpdateKafkaIntegrationRequest, UpdateMcmIntegrationRequest, UpdateMicrosoftSentinelIntegrationRequest, UpdateQradarIntegrationRequest, UpdateSplunkIntegrationRequest, UpdateSyslogIntegrationRequest, UpdateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into UpdateChronicleIntegrationRequest
        try:
            instance.actual_instance = UpdateChronicleIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateElasticsearchIntegrationRequest
        try:
            instance.actual_instance = UpdateElasticsearchIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateGooglePubSubIntegrationRequest
        try:
            instance.actual_instance = UpdateGooglePubSubIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateKafkaIntegrationRequest
        try:
            instance.actual_instance = UpdateKafkaIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateMcmIntegrationRequest
        try:
            instance.actual_instance = UpdateMcmIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateQradarIntegrationRequest
        try:
            instance.actual_instance = UpdateQradarIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateGoogleSccIntegrationRequest
        try:
            instance.actual_instance = UpdateGoogleSccIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateMicrosoftSentinelIntegrationRequest
        try:
            instance.actual_instance = UpdateMicrosoftSentinelIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateSplunkIntegrationRequest
        try:
            instance.actual_instance = UpdateSplunkIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateAmazonSqsIntegrationRequest
        try:
            instance.actual_instance = UpdateAmazonSqsIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateSyslogIntegrationRequest
        try:
            instance.actual_instance = UpdateSyslogIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into UpdateWebhookIntegrationRequest
        try:
            instance.actual_instance = UpdateWebhookIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into UpdateIntegrationRequest with oneOf schemas: UpdateAmazonSqsIntegrationRequest, UpdateChronicleIntegrationRequest, UpdateElasticsearchIntegrationRequest, UpdateGooglePubSubIntegrationRequest, UpdateGoogleSccIntegrationRequest, UpdateKafkaIntegrationRequest, UpdateMcmIntegrationRequest, UpdateMicrosoftSentinelIntegrationRequest, UpdateQradarIntegrationRequest, UpdateSplunkIntegrationRequest, UpdateSyslogIntegrationRequest, UpdateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into UpdateIntegrationRequest with oneOf schemas: UpdateAmazonSqsIntegrationRequest, UpdateChronicleIntegrationRequest, UpdateElasticsearchIntegrationRequest, UpdateGooglePubSubIntegrationRequest, UpdateGoogleSccIntegrationRequest, UpdateKafkaIntegrationRequest, UpdateMcmIntegrationRequest, UpdateMicrosoftSentinelIntegrationRequest, UpdateQradarIntegrationRequest, UpdateSplunkIntegrationRequest, UpdateSyslogIntegrationRequest, UpdateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], UpdateAmazonSqsIntegrationRequest, UpdateChronicleIntegrationRequest, UpdateElasticsearchIntegrationRequest, UpdateGooglePubSubIntegrationRequest, UpdateGoogleSccIntegrationRequest, UpdateKafkaIntegrationRequest, UpdateMcmIntegrationRequest, UpdateMicrosoftSentinelIntegrationRequest, UpdateQradarIntegrationRequest, UpdateSplunkIntegrationRequest, UpdateSyslogIntegrationRequest, UpdateWebhookIntegrationRequest]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


