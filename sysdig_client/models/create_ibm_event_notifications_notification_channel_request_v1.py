# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict
from typing import Any, ClassVar, Dict, List
from sysdig_client.models.create_notification_channel_request_v1 import CreateNotificationChannelRequestV1
from sysdig_client.models.ibm_event_notifications_notification_channel_options_v1 import IbmEventNotificationsNotificationChannelOptionsV1
from sysdig_client.models.notification_channel_type_v1 import NotificationChannelTypeV1
from typing import Optional, Set
from typing_extensions import Self

class CreateIbmEventNotificationsNotificationChannelRequestV1(CreateNotificationChannelRequestV1):
    """
    This channel is only available in IBM Cloud
    """ # noqa: E501
    options: IbmEventNotificationsNotificationChannelOptionsV1
    __properties: ClassVar[List[str]] = ["teamId", "isEnabled", "name", "hasTestNotificationEnabled", "type", "options"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateIbmEventNotificationsNotificationChannelRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of options
        if self.options:
            _dict['options'] = self.options.to_dict()
        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateIbmEventNotificationsNotificationChannelRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "teamId": obj.get("teamId"),
            "isEnabled": obj.get("isEnabled") if obj.get("isEnabled") is not None else False,
            "name": obj.get("name"),
            "hasTestNotificationEnabled": obj.get("hasTestNotificationEnabled") if obj.get("hasTestNotificationEnabled") is not None else False,
            "type": obj.get("type"),
            "options": IbmEventNotificationsNotificationChannelOptionsV1.from_dict(obj["options"]) if obj.get("options") is not None else None
        })
        return _obj


