# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.host_name import HostName
from sysdig_client.models.host_name_contains import HostNameContains
from sysdig_client.models.image_name import ImageName
from sysdig_client.models.image_name_contains import ImageNameContains
from sysdig_client.models.image_prefix import ImagePrefix
from sysdig_client.models.image_suffix import ImageSuffix
from sysdig_client.models.package_name import PackageName
from sysdig_client.models.package_name_version import PackageNameVersion
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATERISKACCEPTEDREQUESTALLOFCONTEXT_ONE_OF_SCHEMAS = ["List[HostNameContains]", "List[HostName]", "List[ImageNameContains]", "List[ImageName]", "List[ImagePrefix]", "List[ImageSuffix]", "List[PackageNameVersion]", "List[PackageName]", "List[object]"]

class CreateRiskAcceptedRequestAllOfContext(BaseModel):
    """
    If entityType is not `vulnerability` or `policyRule`, you should use `Empty Matcher` in the context.
    """
    # data type: List[object]
    oneof_schema_1_validator: Optional[Annotated[List[Dict[str, Any]], Field(max_length=0)]] = Field(default=None, description="To be used when `entityType` is not `vulnerability` or `policyRule`.")
    # data type: List[ImageName]
    oneof_schema_2_validator: Optional[Annotated[List[ImageName], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context to apply")
    # data type: List[ImageSuffix]
    oneof_schema_3_validator: Optional[Annotated[List[ImageSuffix], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context to apply")
    # data type: List[ImagePrefix]
    oneof_schema_4_validator: Optional[Annotated[List[ImagePrefix], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context to apply")
    # data type: List[ImageNameContains]
    oneof_schema_5_validator: Optional[Annotated[List[ImageNameContains], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context to apply")
    # data type: List[PackageName]
    oneof_schema_6_validator: Optional[Annotated[List[PackageName], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context to apply")
    # data type: List[PackageNameVersion]
    oneof_schema_7_validator: Optional[Annotated[List[PackageNameVersion], Field(min_length=2, max_length=2)]] = Field(default=None, description="Context to apply")
    # data type: List[HostName]
    oneof_schema_8_validator: Optional[Annotated[List[HostName], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context host name")
    # data type: List[HostNameContains]
    oneof_schema_9_validator: Optional[Annotated[List[HostNameContains], Field(min_length=1, max_length=1)]] = Field(default=None, description="Context to apply")
    actual_instance: Optional[Union[List[HostNameContains], List[HostName], List[ImageNameContains], List[ImageName], List[ImagePrefix], List[ImageSuffix], List[PackageNameVersion], List[PackageName], List[object]]] = None
    one_of_schemas: Set[str] = { "List[HostNameContains]", "List[HostName]", "List[ImageNameContains]", "List[ImageName]", "List[ImagePrefix]", "List[ImageSuffix]", "List[PackageNameVersion]", "List[PackageName]", "List[object]" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateRiskAcceptedRequestAllOfContext.model_construct()
        error_messages = []
        match = 0
        # validate data type: List[object]
        try:
            instance.oneof_schema_1_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[ImageName]
        try:
            instance.oneof_schema_2_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[ImageSuffix]
        try:
            instance.oneof_schema_3_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[ImagePrefix]
        try:
            instance.oneof_schema_4_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[ImageNameContains]
        try:
            instance.oneof_schema_5_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[PackageName]
        try:
            instance.oneof_schema_6_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[PackageNameVersion]
        try:
            instance.oneof_schema_7_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[HostName]
        try:
            instance.oneof_schema_8_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # validate data type: List[HostNameContains]
        try:
            instance.oneof_schema_9_validator = v
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateRiskAcceptedRequestAllOfContext with oneOf schemas: List[HostNameContains], List[HostName], List[ImageNameContains], List[ImageName], List[ImagePrefix], List[ImageSuffix], List[PackageNameVersion], List[PackageName], List[object]. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateRiskAcceptedRequestAllOfContext with oneOf schemas: List[HostNameContains], List[HostName], List[ImageNameContains], List[ImageName], List[ImagePrefix], List[ImageSuffix], List[PackageNameVersion], List[PackageName], List[object]. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into List[object]
        try:
            # validation
            instance.oneof_schema_1_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_1_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ImageName]
        try:
            # validation
            instance.oneof_schema_2_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_2_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ImageSuffix]
        try:
            # validation
            instance.oneof_schema_3_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_3_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ImagePrefix]
        try:
            # validation
            instance.oneof_schema_4_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_4_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[ImageNameContains]
        try:
            # validation
            instance.oneof_schema_5_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_5_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[PackageName]
        try:
            # validation
            instance.oneof_schema_6_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_6_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[PackageNameVersion]
        try:
            # validation
            instance.oneof_schema_7_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_7_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[HostName]
        try:
            # validation
            instance.oneof_schema_8_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_8_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into List[HostNameContains]
        try:
            # validation
            instance.oneof_schema_9_validator = json.loads(json_str)
            # assign value to actual_instance
            instance.actual_instance = instance.oneof_schema_9_validator
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateRiskAcceptedRequestAllOfContext with oneOf schemas: List[HostNameContains], List[HostName], List[ImageNameContains], List[ImageName], List[ImagePrefix], List[ImageSuffix], List[PackageNameVersion], List[PackageName], List[object]. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateRiskAcceptedRequestAllOfContext with oneOf schemas: List[HostNameContains], List[HostName], List[ImageNameContains], List[ImageName], List[ImagePrefix], List[ImageSuffix], List[PackageNameVersion], List[PackageName], List[object]. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], List[HostNameContains], List[HostName], List[ImageNameContains], List[ImageName], List[ImagePrefix], List[ImageSuffix], List[PackageNameVersion], List[PackageName], List[object]]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


