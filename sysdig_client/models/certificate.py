# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from sysdig_client.models.certificate_validity import CertificateValidity
from typing import Optional, Set
from typing_extensions import Self

class Certificate(BaseModel):
    """
    An X-509 certificate
    """ # noqa: E501
    id: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="The certificate ID.")
    certificate_name: Annotated[str, Field(strict=True, max_length=200)] = Field(description="The certificate Name.", alias="certificateName")
    created: datetime = Field(description="The timestamp the certificate was created.")
    issuer: Annotated[str, Field(strict=True, max_length=2000)] = Field(description="The Distinguished Name of the certificate issuer.")
    validity: CertificateValidity
    usage: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="The number of services that currently use that certificate.")
    fingerprint: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The certificate fingerprint")
    __properties: ClassVar[List[str]] = ["id", "certificateName", "created", "issuer", "validity", "usage", "fingerprint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Certificate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of validity
        if self.validity:
            _dict['validity'] = self.validity.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Certificate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "certificateName": obj.get("certificateName"),
            "created": obj.get("created"),
            "issuer": obj.get("issuer"),
            "validity": CertificateValidity.from_dict(obj["validity"]) if obj.get("validity") is not None else None,
            "usage": obj.get("usage"),
            "fingerprint": obj.get("fingerprint")
        })
        return _obj


