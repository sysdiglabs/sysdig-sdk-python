# coding: utf-8

"""
    Sysdig Secure Events Feed API

    Sysdig Secure Events Feed API enables you to deep-dive into specific security events.

    The version of the OpenAPI document: 1.2.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class SequenceInner(BaseModel):
    """
    SequenceInner
    """ # noqa: E501
    event_id: Annotated[str, Field(strict=True, max_length=36)] = Field(description="The unique identifier of the log event.", alias="eventId")
    event_name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The name of the event.", alias="eventName")
    event_time: datetime = Field(description="The time when the event occurred.", alias="eventTime")
    ingestion_id: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The unique identifier of the ingestion.", alias="ingestionId")
    region: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The region where the event occurred.")
    source: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The source of the event.")
    source_ip_address: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The IP address of the source.", alias="sourceIpAddress")
    sub_ingestion_id: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The unique identifier of the sub ingestion.", alias="subIngestionId")
    __properties: ClassVar[List[str]] = ["eventId", "eventName", "eventTime", "ingestionId", "region", "source", "sourceIpAddress", "subIngestionId"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SequenceInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SequenceInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "eventId": obj.get("eventId"),
            "eventName": obj.get("eventName"),
            "eventTime": obj.get("eventTime"),
            "ingestionId": obj.get("ingestionId"),
            "region": obj.get("region"),
            "source": obj.get("source"),
            "sourceIpAddress": obj.get("sourceIpAddress"),
            "subIngestionId": obj.get("subIngestionId")
        })
        return _obj


