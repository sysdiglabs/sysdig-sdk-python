# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AccessKeyResponseV1(BaseModel):
    """
    Access key response
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    is_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if the access key is enabled", alias="isEnabled")
    access_key: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Displays the access key value", alias="accessKey")
    date_created: Optional[datetime] = Field(default=None, description="Date and time when access key was created ", alias="dateCreated")
    date_disabled: Optional[datetime] = Field(default=None, description="Date and time when access key was disabled ", alias="dateDisabled")
    agent_limit: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Maximum number of agents that can be connected with the access key", alias="agentLimit")
    agent_reservation: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Number of agents that are guaranteed to be available for the access key", alias="agentReservation")
    team_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of team that owns the access key", alias="teamId")
    metadata: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=76)]]] = Field(default=None, description="Access key metadata (maximum of 20 key-value pairs where key can be up to 25 characters long and value can be up to 50 characters long)")
    __properties: ClassVar[List[str]] = ["id", "isEnabled", "accessKey", "dateCreated", "dateDisabled", "agentLimit", "agentReservation", "teamId", "metadata"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AccessKeyResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if date_created (nullable) is None
        # and model_fields_set contains the field
        if self.date_created is None and "date_created" in self.model_fields_set:
            _dict['dateCreated'] = None

        # set to None if date_disabled (nullable) is None
        # and model_fields_set contains the field
        if self.date_disabled is None and "date_disabled" in self.model_fields_set:
            _dict['dateDisabled'] = None

        # set to None if agent_limit (nullable) is None
        # and model_fields_set contains the field
        if self.agent_limit is None and "agent_limit" in self.model_fields_set:
            _dict['agentLimit'] = None

        # set to None if agent_reservation (nullable) is None
        # and model_fields_set contains the field
        if self.agent_reservation is None and "agent_reservation" in self.model_fields_set:
            _dict['agentReservation'] = None

        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AccessKeyResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "isEnabled": obj.get("isEnabled"),
            "accessKey": obj.get("accessKey"),
            "dateCreated": obj.get("dateCreated"),
            "dateDisabled": obj.get("dateDisabled"),
            "agentLimit": obj.get("agentLimit"),
            "agentReservation": obj.get("agentReservation"),
            "teamId": obj.get("teamId"),
            "metadata": obj.get("metadata")
        })
        return _obj


