# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API enables you to deep-dive into specific security events.

    The version of the OpenAPI document: 1.2.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sysdig_client.models.event_content import EventContent

class TestEventContent(unittest.TestCase):
    """EventContent unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> EventContent:
        """Test EventContent
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `EventContent`
        """
        model = EventContent()
        if include_optional:
            return EventContent(
                type = 'workloadRuntimeDetection',
                namespace = 'hub',
                cluster_name = 'prod5',
                resource_name = 'sfdc-bulk-updates-12345678',
                resource_kind = 'Job',
                zones = [
                    sysdig_client.models.zone.Zone(
                        zone_name = 'Zone example', 
                        zone_id = 1234, )
                    ],
                scan_result = None,
                integration_id = '2U98T7RVNpAfveU6t9U6JoKVuZb',
                integration_type = 'cloudtrail',
                rule_name = 'Create Security Group Rule Allowing SSH Ingress',
                rule_type = 6,
                rule_tags = [
                    'AWS_IAM'
                    ],
                policy_id = 2,
                policy_origin = 'Sysdig',
                policy_notification_channel_ids = [
                    123
                    ],
                priority = 'error',
                output = '',
                fields = None,
                rule_sub_type = 1,
                run_book = 'https://www.mycompany.com/our-runbook-link',
                origin = 'Sysdig',
                command = 'bash',
                exe = '/bin/bash',
                detected_class_probability = 0.8,
                stats = [
                    sysdig_client.models.stats_inner.Stats_inner(
                        api = 'DescribeInternetGateways', 
                        count = 1, )
                    ],
                sequence = [
                    sysdig_client.models.sequence_inner.Sequence_inner(
                        event_id = '9aca10ca-481a-4ab7-b8fa-929c1ebf4c18', 
                        event_name = 'CreateUser', 
                        event_time = '2024-08-11T23:48:40Z', 
                        ingestion_id = '41157131027', 
                        region = 'us-east-1', 
                        source = 'aws', 
                        source_ip_address = '1.1.1.1', 
                        sub_ingestion_id = 'us-east-1', )
                    ]
            )
        else:
            return EventContent(
                type = 'workloadRuntimeDetection',
                scan_result = None,
                integration_id = '2U98T7RVNpAfveU6t9U6JoKVuZb',
                integration_type = 'cloudtrail',
                rule_name = 'Create Security Group Rule Allowing SSH Ingress',
                rule_type = 6,
                rule_tags = [
                    'AWS_IAM'
                    ],
                policy_id = 2,
                policy_origin = 'Sysdig',
                policy_notification_channel_ids = [
                    123
                    ],
                output = '',
                fields = None,
                rule_sub_type = 1,
                command = 'bash',
                exe = '/bin/bash',
                detected_class_probability = 0.8,
        )
        """

    def testEventContent(self):
        """Test EventContent"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
