# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.bom_metadata import BOMMetadata
from sysdig_client.models.compositions_inner import CompositionsInner
from sysdig_client.models.dependency import Dependency
from sysdig_client.models.sbom_component import SbomComponent
from typing import Optional, Set
from typing_extensions import Self

class SbomResultResponse(BaseModel):
    """
    SBOM of the requested asset
    """ # noqa: E501
    bom_format: StrictStr = Field(description="Specifies the format of the BOM. This helps to identify the file as CycloneDX since BOMs do not have a filename convention nor does JSON schema support namespaces. This value MUST be \"CycloneDX\".", alias="bomFormat")
    spec_version: Annotated[str, Field(strict=True, max_length=512)] = Field(description="The version of the CycloneDX specification a BOM conforms to (starting at version 1.2).", alias="specVersion")
    serial_number: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Every BOM generated SHOULD have a unique serial number, even if the contents of the BOM have not changed over time. If specified, the serial number MUST conform to RFC-4122. Use of serial numbers are RECOMMENDED.", alias="serialNumber")
    version: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=1)]] = Field(default=1, description="Whenever an existing BOM is modified, either manually or through automated processes, the version of the BOM SHOULD be incremented by 1. When a system is presented with multiple BOMs with identical serial numbers, the system SHOULD use the most recent version of the BOM. The default version is '1'.")
    metadata: Optional[BOMMetadata] = None
    components: Optional[Annotated[List[SbomComponent], Field(max_length=1000000)]] = Field(default=None, description="A list of software and hardware components.")
    dependencies: Optional[Annotated[List[Dependency], Field(max_length=1000000)]] = Field(default=None, description="Provides the ability to document dependency relationships.")
    compositions: Optional[Annotated[List[CompositionsInner], Field(max_length=1000000)]] = Field(default=None, description="Compositions describe constituent parts (including components, services, and dependency relationships) and their completeness. The completeness of vulnerabilities expressed in a BOM may also be described.")
    __properties: ClassVar[List[str]] = ["bomFormat", "specVersion", "serialNumber", "version", "metadata", "components", "dependencies", "compositions"]

    @field_validator('bom_format')
    def bom_format_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['CycloneDX']):
            raise ValueError("must be one of enum values ('CycloneDX')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SbomResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in components (list)
        _items = []
        if self.components:
            for _item_components in self.components:
                if _item_components:
                    _items.append(_item_components.to_dict())
            _dict['components'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in dependencies (list)
        _items = []
        if self.dependencies:
            for _item_dependencies in self.dependencies:
                if _item_dependencies:
                    _items.append(_item_dependencies.to_dict())
            _dict['dependencies'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in compositions (list)
        _items = []
        if self.compositions:
            for _item_compositions in self.compositions:
                if _item_compositions:
                    _items.append(_item_compositions.to_dict())
            _dict['compositions'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SbomResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "bomFormat": obj.get("bomFormat"),
            "specVersion": obj.get("specVersion"),
            "serialNumber": obj.get("serialNumber"),
            "version": obj.get("version") if obj.get("version") is not None else 1,
            "metadata": BOMMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "components": [SbomComponent.from_dict(_item) for _item in obj["components"]] if obj.get("components") is not None else None,
            "dependencies": [Dependency.from_dict(_item) for _item in obj["dependencies"]] if obj.get("dependencies") is not None else None,
            "compositions": [CompositionsInner.from_dict(_item) for _item in obj["compositions"]] if obj.get("compositions") is not None else None
        })
        return _obj


