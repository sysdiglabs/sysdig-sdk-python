# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.product import Product
from sysdig_client.models.sso_settings_response_base_v1 import SsoSettingsResponseBaseV1
from typing import Optional, Set
from typing_extensions import Self

class SsoSettingsResponseV1(BaseModel):
    """
    SsoSettingsResponseV1
    """ # noqa: E501
    product: Optional[Product] = Field(default=None, description="The product to which SSO settings is applied to. SSO settings are configured per specific product.")
    is_active: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the SSO settings is active.", alias="isActive")
    create_user_on_login: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the user will be created automatically if not found in the system.", alias="createUserOnLogin")
    is_password_login_enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the user will be able to login with password.", alias="isPasswordLoginEnabled")
    is_single_logout_enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the single logout support is enabled.", alias="isSingleLogoutEnabled")
    is_group_mapping_enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate if group mapping support is enabled.", alias="isGroupMappingEnabled")
    group_mapping_attribute_name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The group mapping attribute name.", alias="groupMappingAttributeName")
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    config: Optional[SsoSettingsResponseBaseV1] = None
    date_created: Optional[datetime] = Field(default=None, description="The date (in ISO 8601 format) when this SSO config was created.", alias="dateCreated")
    last_updated: Optional[datetime] = Field(default=None, description="The date (in ISO 8601 format) when this SSO config was last updated.", alias="lastUpdated")
    version: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    __properties: ClassVar[List[str]] = ["product", "isActive", "createUserOnLogin", "isPasswordLoginEnabled", "isSingleLogoutEnabled", "isGroupMappingEnabled", "groupMappingAttributeName", "id", "config", "dateCreated", "lastUpdated", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SsoSettingsResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of config
        if self.config:
            _dict['config'] = self.config.to_dict()
        # set to None if group_mapping_attribute_name (nullable) is None
        # and model_fields_set contains the field
        if self.group_mapping_attribute_name is None and "group_mapping_attribute_name" in self.model_fields_set:
            _dict['groupMappingAttributeName'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SsoSettingsResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "product": obj.get("product"),
            "isActive": obj.get("isActive"),
            "createUserOnLogin": obj.get("createUserOnLogin"),
            "isPasswordLoginEnabled": obj.get("isPasswordLoginEnabled"),
            "isSingleLogoutEnabled": obj.get("isSingleLogoutEnabled"),
            "isGroupMappingEnabled": obj.get("isGroupMappingEnabled"),
            "groupMappingAttributeName": obj.get("groupMappingAttributeName"),
            "id": obj.get("id"),
            "config": SsoSettingsResponseBaseV1.from_dict(obj["config"]) if obj.get("config") is not None else None,
            "dateCreated": obj.get("dateCreated"),
            "lastUpdated": obj.get("lastUpdated"),
            "version": obj.get("version")
        })
        return _obj


