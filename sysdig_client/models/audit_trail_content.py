# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuditTrailContent(BaseModel):
    """
    Content object for Platform Audit Event.
    """ # noqa: E501
    timestamp_ns: Optional[Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)]] = Field(default=None, description="The event timestamp in nanoseconds.", alias="timestampNs")
    user_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of user that was preforming some action.", alias="userId")
    username: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Username of the user that was preforming some action.")
    team_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="Team ID, that user who preformed some action was logged in.", alias="teamId")
    team_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Name of the team, that user who preformed action was logged in.", alias="teamName")
    request_method: Optional[StrictStr] = Field(default=None, description="HTTP request method that was used to preform action.", alias="requestMethod")
    request_uri: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = Field(default=None, description="URI of the request that was used to preform action.", alias="requestUri")
    user_origin_ip: Optional[Annotated[str, Field(strict=True, max_length=43)]] = Field(default=None, description="IP address of the user that was preforming action.", alias="userOriginIP")
    query_string: Optional[Annotated[str, Field(strict=True, max_length=8192)]] = Field(default=None, description="Query string of the request that was used to preform action.", alias="queryString")
    response_status_code: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="HTTP response status code of the request that was used to preform action.", alias="responseStatusCode")
    entity_type: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="Type of entity that was affected by the action. Full list of possible values can be found in the our documentation https://docs.sysdig.com/en/docs/administration/administration-settings/app-status-and-audit/sysdig-platform-audit/#sysdig-monitor-and-sysdig-platform. ", alias="entityType")
    entity_id: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="ID of the entity that was affected by the action.", alias="entityId")
    entity_payload: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="Payload of the entity that was affected by the action.", alias="entityPayload")
    service_account_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of the service account that was used to preform action.", alias="serviceAccountId")
    service_account_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Name of the service account that was used to preform action.", alias="serviceAccountName")
    __properties: ClassVar[List[str]] = ["timestampNs", "userId", "username", "teamId", "teamName", "requestMethod", "requestUri", "userOriginIP", "queryString", "responseStatusCode", "entityType", "entityId", "entityPayload", "serviceAccountId", "serviceAccountName"]

    @field_validator('request_method')
    def request_method_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['GET', 'POST', 'PUT', 'DELETE', 'PATCH']):
            raise ValueError("must be one of enum values ('GET', 'POST', 'PUT', 'DELETE', 'PATCH')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuditTrailContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuditTrailContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "timestampNs": obj.get("timestampNs"),
            "userId": obj.get("userId"),
            "username": obj.get("username"),
            "teamId": obj.get("teamId"),
            "teamName": obj.get("teamName"),
            "requestMethod": obj.get("requestMethod"),
            "requestUri": obj.get("requestUri"),
            "userOriginIP": obj.get("userOriginIP"),
            "queryString": obj.get("queryString"),
            "responseStatusCode": obj.get("responseStatusCode"),
            "entityType": obj.get("entityType"),
            "entityId": obj.get("entityId"),
            "entityPayload": obj.get("entityPayload"),
            "serviceAccountId": obj.get("serviceAccountId"),
            "serviceAccountName": obj.get("serviceAccountName")
        })
        return _obj


