# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.pricing_type import PricingType
from sysdig_client.models.unit_pricing_v1 import UnitPricingV1
from typing import Optional, Set
from typing_extensions import Self

class UpdatePricingRequestV1(BaseModel):
    """
    UpdatePricingRequestV1
    """ # noqa: E501
    type: PricingType
    cluster_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The name of the cluster. Required when `type` is `CLUSTER`.", alias="clusterName")
    name: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The name of the pricing profile.")
    unit_pricing: UnitPricingV1 = Field(description="The unit pricing configuration used to compute costs.", alias="unitPricing")
    spot_label: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The name of a node label that is used to identify the node as a spot node.", alias="spotLabel")
    spot_label_value: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The value of the spot node label.", alias="spotLabelValue")
    version: Annotated[int, Field(strict=True, ge=0)] = Field(description="The current version of the resource. ")
    __properties: ClassVar[List[str]] = ["type", "clusterName", "name", "unitPricing", "spotLabel", "spotLabelValue", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UpdatePricingRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of unit_pricing
        if self.unit_pricing:
            _dict['unitPricing'] = self.unit_pricing.to_dict()
        # set to None if cluster_name (nullable) is None
        # and model_fields_set contains the field
        if self.cluster_name is None and "cluster_name" in self.model_fields_set:
            _dict['clusterName'] = None

        # set to None if spot_label (nullable) is None
        # and model_fields_set contains the field
        if self.spot_label is None and "spot_label" in self.model_fields_set:
            _dict['spotLabel'] = None

        # set to None if spot_label_value (nullable) is None
        # and model_fields_set contains the field
        if self.spot_label_value is None and "spot_label_value" in self.model_fields_set:
            _dict['spotLabelValue'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UpdatePricingRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "clusterName": obj.get("clusterName"),
            "name": obj.get("name"),
            "unitPricing": UnitPricingV1.from_dict(obj["unitPricing"]) if obj.get("unitPricing") is not None else None,
            "spotLabel": obj.get("spotLabel"),
            "spotLabelValue": obj.get("spotLabelValue"),
            "version": obj.get("version")
        })
        return _obj


