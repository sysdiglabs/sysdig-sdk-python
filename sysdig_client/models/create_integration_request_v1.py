# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateIntegrationRequestV1(BaseModel):
    """
    CreateIntegrationRequestV1
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Integration name.")
    is_all_teams: Optional[StrictBool] = Field(default=None, description="If **true**, the integration will be enabled for all teams. If **false**, the integration will be enabled for the teams specified in the *teamIds* field. ", alias="isAllTeams")
    team_ids: Optional[Annotated[List[Annotated[int, Field(strict=True, ge=0)]], Field(max_length=500)]] = Field(default=None, description="List of Sysdig's internal team ids for which the integration will be enabled. This field is required if *isAllTeams* is **false**. ", alias="teamIds")
    jira_project: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Associated Jira project id. Please refer to the [Jira documentation](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-projects#api-group-projects \"Jira project documentation\") for more info. ", alias="jiraProject")
    jira_url: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Customer's Jira URL.", alias="jiraUrl")
    jira_email: Annotated[str, Field(strict=True, max_length=512)] = Field(description="User's email associated with the Jira account.", alias="jiraEmail")
    jira_access_token: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira access token for the provided Jira account.", alias="jiraAccessToken")
    jira_assignee: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="The default assignee Jira account id for this integration. Please refer to the [Jira documentation](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-user-search/#api-group-user-search \"Jira user documentation\") for more info. ", alias="jiraAssignee")
    jira_labels: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=512)]], Field(max_length=500)]] = Field(default=None, description="The list of Jira labels available for this integration. Please refer to the [Jira documentation](https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-labels/#api-group-labels \"Jira labels documentation\") for more info. ", alias="jiraLabels")
    __properties: ClassVar[List[str]] = ["name", "isAllTeams", "teamIds", "jiraProject", "jiraUrl", "jiraEmail", "jiraAccessToken", "jiraAssignee", "jiraLabels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateIntegrationRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateIntegrationRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "isAllTeams": obj.get("isAllTeams"),
            "teamIds": obj.get("teamIds"),
            "jiraProject": obj.get("jiraProject"),
            "jiraUrl": obj.get("jiraUrl"),
            "jiraEmail": obj.get("jiraEmail"),
            "jiraAccessToken": obj.get("jiraAccessToken"),
            "jiraAssignee": obj.get("jiraAssignee"),
            "jiraLabels": obj.get("jiraLabels")
        })
        return _obj


