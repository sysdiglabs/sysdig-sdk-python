# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Command(BaseModel):
    """
    Represents a command execution.
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The audit event id.")
    timestamp: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Timestamp the audit event occured, expressed in nanoseconds.")
    type: StrictStr = Field(description="The entry type")
    container_id: Optional[Annotated[str, Field(strict=True, max_length=200)]] = Field(default=None, description="The container id. `containerId` is present only if the audit event was collected in a container context. ", alias="containerId")
    cmdline: Annotated[str, Field(strict=True, max_length=4096)] = Field(description="Full command line")
    comm: Annotated[str, Field(strict=True, max_length=20)] = Field(description="The name of the command.")
    pcomm: Annotated[str, Field(strict=True, max_length=20)] = Field(description="The name of the parent command.")
    pid: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Process ID.")
    ppid: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Parent process ID.")
    uid: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="User ID")
    username: Optional[Annotated[str, Field(strict=True, max_length=20)]] = Field(default=None, description="Username")
    cwd: Annotated[str, Field(strict=True, max_length=50)] = Field(description="Command working directory.")
    login_shell_id: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Process id of the shell.", alias="loginShellId")
    login_shell_distance: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Level of nesting from the parent shell.", alias="loginShellDistance")
    hostname: Annotated[str, Field(strict=True, max_length=200)] = Field(description="The Kubernetes hostname.")
    tty: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="TTY number.")
    user_login_uid: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="User login UID.", alias="userLoginUid")
    user_login_name: Annotated[str, Field(strict=True, max_length=20)] = Field(description="User login name.", alias="userLoginName")
    proc_exepath: Annotated[str, Field(strict=True, max_length=4096)] = Field(description="Process executable path.", alias="procExepath")
    labels: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=200)]]] = Field(default=None, description="Key value pairs of labels.")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "type", "containerId", "cmdline", "comm", "pcomm", "pid", "ppid", "uid", "username", "cwd", "loginShellId", "loginShellDistance", "hostname", "tty", "userLoginUid", "userLoginName", "procExepath", "labels"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['command']):
            raise ValueError("must be one of enum values ('command')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Command from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Command from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "type": obj.get("type"),
            "containerId": obj.get("containerId"),
            "cmdline": obj.get("cmdline"),
            "comm": obj.get("comm"),
            "pcomm": obj.get("pcomm"),
            "pid": obj.get("pid"),
            "ppid": obj.get("ppid"),
            "uid": obj.get("uid"),
            "username": obj.get("username"),
            "cwd": obj.get("cwd"),
            "loginShellId": obj.get("loginShellId"),
            "loginShellDistance": obj.get("loginShellDistance"),
            "hostname": obj.get("hostname"),
            "tty": obj.get("tty"),
            "userLoginUid": obj.get("userLoginUid"),
            "userLoginName": obj.get("userLoginName"),
            "procExepath": obj.get("procExepath"),
            "labels": obj.get("labels")
        })
        return _obj


