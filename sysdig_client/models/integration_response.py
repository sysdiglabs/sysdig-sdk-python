# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sysdig_client.models.get_amazon_sqs_integration_response import GetAmazonSqsIntegrationResponse
from sysdig_client.models.get_chronicle_integration_response import GetChronicleIntegrationResponse
from sysdig_client.models.get_elasticsearch_integration_response import GetElasticsearchIntegrationResponse
from sysdig_client.models.get_google_pub_sub_integration_response import GetGooglePubSubIntegrationResponse
from sysdig_client.models.get_google_scc_integration_response import GetGoogleSccIntegrationResponse
from sysdig_client.models.get_kafka_integration_response import GetKafkaIntegrationResponse
from sysdig_client.models.get_mcm_integration_response import GetMcmIntegrationResponse
from sysdig_client.models.get_microsoft_sentinel_integration_response import GetMicrosoftSentinelIntegrationResponse
from sysdig_client.models.get_qradar_integration_response import GetQradarIntegrationResponse
from sysdig_client.models.get_splunk_integration_response import GetSplunkIntegrationResponse
from sysdig_client.models.get_syslog_integration_response import GetSyslogIntegrationResponse
from sysdig_client.models.get_webhook_integration_response import GetWebhookIntegrationResponse
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

INTEGRATIONRESPONSE_ONE_OF_SCHEMAS = ["GetAmazonSqsIntegrationResponse", "GetChronicleIntegrationResponse", "GetElasticsearchIntegrationResponse", "GetGooglePubSubIntegrationResponse", "GetGoogleSccIntegrationResponse", "GetKafkaIntegrationResponse", "GetMcmIntegrationResponse", "GetMicrosoftSentinelIntegrationResponse", "GetQradarIntegrationResponse", "GetSplunkIntegrationResponse", "GetSyslogIntegrationResponse", "GetWebhookIntegrationResponse"]

class IntegrationResponse(BaseModel):
    """
    Get Integration Response
    """
    # data type: GetAmazonSqsIntegrationResponse
    oneof_schema_1_validator: Optional[GetAmazonSqsIntegrationResponse] = None
    # data type: GetChronicleIntegrationResponse
    oneof_schema_2_validator: Optional[GetChronicleIntegrationResponse] = None
    # data type: GetElasticsearchIntegrationResponse
    oneof_schema_3_validator: Optional[GetElasticsearchIntegrationResponse] = None
    # data type: GetGooglePubSubIntegrationResponse
    oneof_schema_4_validator: Optional[GetGooglePubSubIntegrationResponse] = None
    # data type: GetGoogleSccIntegrationResponse
    oneof_schema_5_validator: Optional[GetGoogleSccIntegrationResponse] = None
    # data type: GetKafkaIntegrationResponse
    oneof_schema_6_validator: Optional[GetKafkaIntegrationResponse] = None
    # data type: GetMcmIntegrationResponse
    oneof_schema_7_validator: Optional[GetMcmIntegrationResponse] = None
    # data type: GetMicrosoftSentinelIntegrationResponse
    oneof_schema_8_validator: Optional[GetMicrosoftSentinelIntegrationResponse] = None
    # data type: GetQradarIntegrationResponse
    oneof_schema_9_validator: Optional[GetQradarIntegrationResponse] = None
    # data type: GetSplunkIntegrationResponse
    oneof_schema_10_validator: Optional[GetSplunkIntegrationResponse] = None
    # data type: GetSyslogIntegrationResponse
    oneof_schema_11_validator: Optional[GetSyslogIntegrationResponse] = None
    # data type: GetWebhookIntegrationResponse
    oneof_schema_12_validator: Optional[GetWebhookIntegrationResponse] = None
    actual_instance: Optional[Union[GetAmazonSqsIntegrationResponse, GetChronicleIntegrationResponse, GetElasticsearchIntegrationResponse, GetGooglePubSubIntegrationResponse, GetGoogleSccIntegrationResponse, GetKafkaIntegrationResponse, GetMcmIntegrationResponse, GetMicrosoftSentinelIntegrationResponse, GetQradarIntegrationResponse, GetSplunkIntegrationResponse, GetSyslogIntegrationResponse, GetWebhookIntegrationResponse]] = None
    one_of_schemas: Set[str] = { "GetAmazonSqsIntegrationResponse", "GetChronicleIntegrationResponse", "GetElasticsearchIntegrationResponse", "GetGooglePubSubIntegrationResponse", "GetGoogleSccIntegrationResponse", "GetKafkaIntegrationResponse", "GetMcmIntegrationResponse", "GetMicrosoftSentinelIntegrationResponse", "GetQradarIntegrationResponse", "GetSplunkIntegrationResponse", "GetSyslogIntegrationResponse", "GetWebhookIntegrationResponse" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = IntegrationResponse.model_construct()
        error_messages = []
        match = 0
        # validate data type: GetAmazonSqsIntegrationResponse
        if not isinstance(v, GetAmazonSqsIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetAmazonSqsIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetChronicleIntegrationResponse
        if not isinstance(v, GetChronicleIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetChronicleIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetElasticsearchIntegrationResponse
        if not isinstance(v, GetElasticsearchIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetElasticsearchIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetGooglePubSubIntegrationResponse
        if not isinstance(v, GetGooglePubSubIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGooglePubSubIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetGoogleSccIntegrationResponse
        if not isinstance(v, GetGoogleSccIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetGoogleSccIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetKafkaIntegrationResponse
        if not isinstance(v, GetKafkaIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetKafkaIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetMcmIntegrationResponse
        if not isinstance(v, GetMcmIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMcmIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetMicrosoftSentinelIntegrationResponse
        if not isinstance(v, GetMicrosoftSentinelIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetMicrosoftSentinelIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetQradarIntegrationResponse
        if not isinstance(v, GetQradarIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetQradarIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetSplunkIntegrationResponse
        if not isinstance(v, GetSplunkIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSplunkIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetSyslogIntegrationResponse
        if not isinstance(v, GetSyslogIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetSyslogIntegrationResponse`")
        else:
            match += 1
        # validate data type: GetWebhookIntegrationResponse
        if not isinstance(v, GetWebhookIntegrationResponse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `GetWebhookIntegrationResponse`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in IntegrationResponse with oneOf schemas: GetAmazonSqsIntegrationResponse, GetChronicleIntegrationResponse, GetElasticsearchIntegrationResponse, GetGooglePubSubIntegrationResponse, GetGoogleSccIntegrationResponse, GetKafkaIntegrationResponse, GetMcmIntegrationResponse, GetMicrosoftSentinelIntegrationResponse, GetQradarIntegrationResponse, GetSplunkIntegrationResponse, GetSyslogIntegrationResponse, GetWebhookIntegrationResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in IntegrationResponse with oneOf schemas: GetAmazonSqsIntegrationResponse, GetChronicleIntegrationResponse, GetElasticsearchIntegrationResponse, GetGooglePubSubIntegrationResponse, GetGoogleSccIntegrationResponse, GetKafkaIntegrationResponse, GetMcmIntegrationResponse, GetMicrosoftSentinelIntegrationResponse, GetQradarIntegrationResponse, GetSplunkIntegrationResponse, GetSyslogIntegrationResponse, GetWebhookIntegrationResponse. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into GetAmazonSqsIntegrationResponse
        try:
            instance.actual_instance = GetAmazonSqsIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetChronicleIntegrationResponse
        try:
            instance.actual_instance = GetChronicleIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetElasticsearchIntegrationResponse
        try:
            instance.actual_instance = GetElasticsearchIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGooglePubSubIntegrationResponse
        try:
            instance.actual_instance = GetGooglePubSubIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetGoogleSccIntegrationResponse
        try:
            instance.actual_instance = GetGoogleSccIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetKafkaIntegrationResponse
        try:
            instance.actual_instance = GetKafkaIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMcmIntegrationResponse
        try:
            instance.actual_instance = GetMcmIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetMicrosoftSentinelIntegrationResponse
        try:
            instance.actual_instance = GetMicrosoftSentinelIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetQradarIntegrationResponse
        try:
            instance.actual_instance = GetQradarIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSplunkIntegrationResponse
        try:
            instance.actual_instance = GetSplunkIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetSyslogIntegrationResponse
        try:
            instance.actual_instance = GetSyslogIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into GetWebhookIntegrationResponse
        try:
            instance.actual_instance = GetWebhookIntegrationResponse.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into IntegrationResponse with oneOf schemas: GetAmazonSqsIntegrationResponse, GetChronicleIntegrationResponse, GetElasticsearchIntegrationResponse, GetGooglePubSubIntegrationResponse, GetGoogleSccIntegrationResponse, GetKafkaIntegrationResponse, GetMcmIntegrationResponse, GetMicrosoftSentinelIntegrationResponse, GetQradarIntegrationResponse, GetSplunkIntegrationResponse, GetSyslogIntegrationResponse, GetWebhookIntegrationResponse. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into IntegrationResponse with oneOf schemas: GetAmazonSqsIntegrationResponse, GetChronicleIntegrationResponse, GetElasticsearchIntegrationResponse, GetGooglePubSubIntegrationResponse, GetGoogleSccIntegrationResponse, GetKafkaIntegrationResponse, GetMcmIntegrationResponse, GetMicrosoftSentinelIntegrationResponse, GetQradarIntegrationResponse, GetSplunkIntegrationResponse, GetSyslogIntegrationResponse, GetWebhookIntegrationResponse. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], GetAmazonSqsIntegrationResponse, GetChronicleIntegrationResponse, GetElasticsearchIntegrationResponse, GetGooglePubSubIntegrationResponse, GetGoogleSccIntegrationResponse, GetKafkaIntegrationResponse, GetMcmIntegrationResponse, GetMicrosoftSentinelIntegrationResponse, GetQradarIntegrationResponse, GetSplunkIntegrationResponse, GetSyslogIntegrationResponse, GetWebhookIntegrationResponse]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


