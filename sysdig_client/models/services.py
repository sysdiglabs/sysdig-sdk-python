# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Services(BaseModel):
    """
    Certificate registrations
    """ # noqa: E501
    certificate_id: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="The certificate ID.", alias="certificateId")
    service_type: StrictStr = Field(description="The service type.", alias="serviceType")
    registered_at: datetime = Field(description="The timestamp the service was configured to use this certificate.", alias="registeredAt")
    service_id: Annotated[str, Field(strict=True, max_length=20)] = Field(description="The integration ID for the service owning the integration that uses the certificate.", alias="serviceId")
    __properties: ClassVar[List[str]] = ["certificateId", "serviceType", "registeredAt", "serviceId"]

    @field_validator('service_type')
    def service_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['EVENTS_FORWARDER']):
            raise ValueError("must be one of enum values ('EVENTS_FORWARDER')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Services from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Services from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "certificateId": obj.get("certificateId"),
            "serviceType": obj.get("serviceType"),
            "registeredAt": obj.get("registeredAt"),
            "serviceId": obj.get("serviceId")
        })
        return _obj


