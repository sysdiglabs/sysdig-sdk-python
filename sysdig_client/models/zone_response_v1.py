# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.zone_scope import ZoneScope
from typing import Optional, Set
from typing_extensions import Self

class ZoneResponseV1(BaseModel):
    """
    ZoneResponseV1
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    name: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="The name of the Zone")
    description: Optional[Annotated[str, Field(strict=True, max_length=8192)]] = Field(default=None, description="The description of the Zone")
    author: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Email of the user who created this Zone")
    last_modified_by: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Email of the user who last modified the Zone", alias="lastModifiedBy")
    last_updated: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Timestamp indicating the moment the Zone has been last updated.\\ It is expressed in milliseconds elapsed since January 1, 1970 UTC. ", alias="lastUpdated")
    is_system: Optional[StrictBool] = Field(default=None, description="Boolean value indicating if the Zone is a *System* one", alias="isSystem")
    scopes: Optional[Annotated[List[ZoneScope], Field(max_length=8192)]] = Field(default=None, description="Attached Zone Scopes")
    __properties: ClassVar[List[str]] = ["id", "name", "description", "author", "lastModifiedBy", "lastUpdated", "isSystem", "scopes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ZoneResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in scopes (list)
        _items = []
        if self.scopes:
            for _item_scopes in self.scopes:
                if _item_scopes:
                    _items.append(_item_scopes.to_dict())
            _dict['scopes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ZoneResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "author": obj.get("author"),
            "lastModifiedBy": obj.get("lastModifiedBy"),
            "lastUpdated": obj.get("lastUpdated"),
            "isSystem": obj.get("isSystem"),
            "scopes": [ZoneScope.from_dict(_item) for _item in obj["scopes"]] if obj.get("scopes") is not None else None
        })
        return _obj


