# coding: utf-8

"""
    Sysdig Secure Events Feed API

    Sysdig Secure Events Feed API enables you to deep-dive into specific security events.

    The version of the OpenAPI document: 1.2.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sysdig_client.models.event import Event

class TestEvent(unittest.TestCase):
    """Event unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Event:
        """Test Event
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Event`
        """
        model = Event()
        if include_optional:
            return Event(
                id = '15cbf54e34df95404caad1c988cf7c42',
                cursor = 'LTltNGUybXIwdWkzZThhMjE1bjRn',
                timestamp = 1617220000000000000,
                originator = 'policy',
                category = 'runtime',
                source = 'k8s_audit',
                source_details = sysdig_client.models.source_details.SourceDetails(
                    type = 'cloud', 
                    sub_type = 'host', ),
                raw_event_originator = 'admissionController',
                raw_event_category = 'runtime',
                engine = 'drift',
                name = 'Launch Privileged Container',
                description = 'Identify a container being created with privileged=true
',
                severity = 4,
                actions = [
                    null
                    ],
                content = sysdig_client.models.event_content.EventContent(),
                labels = {"foo":"bar","baz":"qux"}
            )
        else:
            return Event(
                id = '15cbf54e34df95404caad1c988cf7c42',
                timestamp = 1617220000000000000,
                originator = 'policy',
                category = 'runtime',
                source = 'k8s_audit',
                name = 'Launch Privileged Container',
                description = 'Identify a container being created with privileged=true
',
                severity = 4,
        )
        """

    def testEvent(self):
        """Test Event"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
