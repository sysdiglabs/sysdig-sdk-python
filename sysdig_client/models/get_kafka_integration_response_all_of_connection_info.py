# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GetKafkaIntegrationResponseAllOfConnectionInfo(BaseModel):
    """
    GetKafkaIntegrationResponseAllOfConnectionInfo
    """ # noqa: E501
    brokers: Annotated[List[Annotated[str, Field(strict=True, max_length=256)]], Field(max_length=32)] = Field(description="Kafka server endpoint. A Kafka cluster may provide several brokers; it follows the 'hostname: port' (without protocol scheme).")
    topic: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Kafka topic where you want to store the forwarded data")
    balancer: Optional[StrictStr] = Field(default='murmur2', description="Algorithm that the client uses to multiplex data between the multiple Brokers. For compatibility with the Java client, Murmur2 is used as the default partitioner")
    compression: Optional[StrictStr] = Field(default=None, description="Compression standard used for the data")
    is_tls_enabled: Optional[StrictBool] = Field(default=None, alias="isTlsEnabled")
    is_insecure: Optional[StrictBool] = Field(default=False, description="Skip TLS certificate verification", alias="isInsecure")
    auth: StrictStr = Field(description="The authentication method to optionally use. Currently supporting only GSSAPI")
    principal: Annotated[str, Field(strict=True, max_length=256)] = Field(description="GSSAPI principal")
    realm: Annotated[str, Field(strict=True, max_length=256)] = Field(description="GSSAPI realm")
    service: Annotated[str, Field(strict=True, max_length=256)] = Field(description="GSSAPI Service name")
    krb5: Annotated[str, Field(strict=True, max_length=1048576)] = Field(description="Kerberos krb5.conf file content for GSSAPI")
    __properties: ClassVar[List[str]] = ["brokers", "topic", "balancer", "compression", "isTlsEnabled", "isInsecure", "auth", "principal", "realm", "service", "krb5"]

    @field_validator('balancer')
    def balancer_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['roundrobin', 'leastbytes', 'hash', 'crc32', 'murmur2']):
            raise ValueError("must be one of enum values ('roundrobin', 'leastbytes', 'hash', 'crc32', 'murmur2')")
        return value

    @field_validator('compression')
    def compression_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['lz4', 'snappy', 'zstd', 'gzip']):
            raise ValueError("must be one of enum values ('lz4', 'snappy', 'zstd', 'gzip')")
        return value

    @field_validator('auth')
    def auth_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['gssapi']):
            raise ValueError("must be one of enum values ('gssapi')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetKafkaIntegrationResponseAllOfConnectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetKafkaIntegrationResponseAllOfConnectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "brokers": obj.get("brokers"),
            "topic": obj.get("topic"),
            "balancer": obj.get("balancer") if obj.get("balancer") is not None else 'murmur2',
            "compression": obj.get("compression"),
            "isTlsEnabled": obj.get("isTlsEnabled"),
            "isInsecure": obj.get("isInsecure") if obj.get("isInsecure") is not None else False,
            "auth": obj.get("auth"),
            "principal": obj.get("principal"),
            "realm": obj.get("realm"),
            "service": obj.get("service"),
            "krb5": obj.get("krb5")
        })
        return _obj


