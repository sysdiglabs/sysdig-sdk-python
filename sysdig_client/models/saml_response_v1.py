# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.sso_settings_response_base_v1 import SsoSettingsResponseBaseV1
from sysdig_client.models.sso_type_v1 import SsoTypeV1
from typing import Optional, Set
from typing_extensions import Self

class SamlResponseV1(SsoSettingsResponseBaseV1):
    """
    SamlResponseV1
    """ # noqa: E501
    metadata_url: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="The metadata URL of the SAML provider. **Mutually exclusive with metadata*", alias="metadataUrl")
    metadata_xml: Optional[Annotated[str, Field(strict=True, max_length=65356)]] = Field(default=None, description="The metadata XML of the SAML provider. **Mutually exclusive with metadataUrl*", alias="metadataXml")
    email_parameter: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="The email parameter of the SAML provider.", alias="emailParameter")
    is_signature_validation_enabled: Optional[StrictBool] = Field(default=None, description="Flag that indicates if the signature validation is enabled.", alias="isSignatureValidationEnabled")
    is_signed_assertion_enabled: Optional[StrictBool] = Field(default=None, description="Flag that indicates if the signed assertion is enabled.", alias="isSignedAssertionEnabled")
    is_destination_verification_enabled: Optional[StrictBool] = Field(default=None, description="Flag that indicates if the destination verification is enabled.", alias="isDestinationVerificationEnabled")
    is_encryption_support_enabled: Optional[StrictBool] = Field(default=None, description="Flag that indicates if the encryption support is enabled.", alias="isEncryptionSupportEnabled")
    __properties: ClassVar[List[str]] = ["type", "metadataUrl", "metadataXml", "emailParameter", "isSignatureValidationEnabled", "isSignedAssertionEnabled", "isDestinationVerificationEnabled", "isEncryptionSupportEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of SamlResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of SamlResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "metadataUrl": obj.get("metadataUrl"),
            "metadataXml": obj.get("metadataXml"),
            "emailParameter": obj.get("emailParameter"),
            "isSignatureValidationEnabled": obj.get("isSignatureValidationEnabled"),
            "isSignedAssertionEnabled": obj.get("isSignedAssertionEnabled"),
            "isDestinationVerificationEnabled": obj.get("isDestinationVerificationEnabled"),
            "isEncryptionSupportEnabled": obj.get("isEncryptionSupportEnabled")
        })
        return _obj


