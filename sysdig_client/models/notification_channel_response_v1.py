# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from importlib import import_module
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

from typing import TYPE_CHECKING
if TYPE_CHECKING:
    from sysdig_client.models.custom_webhook_notification_channel_response_v1 import CustomWebhookNotificationChannelResponseV1
    from sysdig_client.models.email_notification_channel_response_v1 import EmailNotificationChannelResponseV1
    from sysdig_client.models.gchat_notification_channel_response_v1 import GchatNotificationChannelResponseV1
    from sysdig_client.models.ibm_event_notifications_notification_channel_response_v1 import IbmEventNotificationsNotificationChannelResponseV1
    from sysdig_client.models.ms_teams_notification_channel_response_v1 import MsTeamsNotificationChannelResponseV1
    from sysdig_client.models.opsgenie_notification_channel_response_v1 import OpsgenieNotificationChannelResponseV1
    from sysdig_client.models.pager_duty_notification_channel_response_v1 import PagerDutyNotificationChannelResponseV1
    from sysdig_client.models.prometheus_alert_manager_notification_channel_response_v1 import PrometheusAlertManagerNotificationChannelResponseV1
    from sysdig_client.models.slack_notification_channel_response_v1 import SlackNotificationChannelResponseV1
    from sysdig_client.models.sns_notification_channel_response_v1 import SnsNotificationChannelResponseV1
    from sysdig_client.models.team_email_notification_channel_response_v1 import TeamEmailNotificationChannelResponseV1
    from sysdig_client.models.victor_ops_notification_channel_response_v1 import VictorOpsNotificationChannelResponseV1
    from sysdig_client.models.webhook_notification_channel_response_v1 import WebhookNotificationChannelResponseV1

class NotificationChannelResponseV1(BaseModel):
    """
    NotificationChannelResponseV1
    """ # noqa: E501
    team_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of team that owns the notification channel. If null, this will be a global notification channel", alias="teamId")
    is_enabled: Optional[StrictBool] = Field(default=False, description="Indicates if the notification channel is enabled or not.", alias="isEnabled")
    name: Annotated[str, Field(strict=True, max_length=255)] = Field(description="Name of the notification channel. It must be unique.")
    has_test_notification_enabled: Optional[StrictBool] = Field(default=False, description="Indicates whether or not a test notification should be sent upon creation or update of this notification channel resource", alias="hasTestNotificationEnabled")
    type: Annotated[str, Field(strict=True, max_length=50)]
    customer_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of customer that owns the notification channel.", alias="customerId")
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="Unique ID of the resource.")
    version: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The current version of the resource.")
    created_on: Optional[datetime] = Field(default=None, description="Creation date.", alias="createdOn")
    modified_on: Optional[datetime] = Field(default=None, description="Last modification date.", alias="modifiedOn")
    __properties: ClassVar[List[str]] = ["teamId", "isEnabled", "name", "hasTestNotificationEnabled", "type", "customerId", "id", "version", "createdOn", "modifiedOn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    # JSON field name that stores the object type
    __discriminator_property_name: ClassVar[str] = 'type'

    # discriminator mappings
    __discriminator_value_class_map: ClassVar[Dict[str, str]] = {
        'CUSTOM_WEBHOOK': 'CustomWebhookNotificationChannelResponseV1','EMAIL': 'EmailNotificationChannelResponseV1','GCHAT': 'GchatNotificationChannelResponseV1','IBM_EVENT_NOTIFICATIONS': 'IbmEventNotificationsNotificationChannelResponseV1','MS_TEAMS': 'MsTeamsNotificationChannelResponseV1','OPSGENIE': 'OpsgenieNotificationChannelResponseV1','PAGER_DUTY': 'PagerDutyNotificationChannelResponseV1','PROMETHEUS_ALERT_MANAGER': 'PrometheusAlertManagerNotificationChannelResponseV1','SLACK': 'SlackNotificationChannelResponseV1','SNS': 'SnsNotificationChannelResponseV1','TEAM_EMAIL': 'TeamEmailNotificationChannelResponseV1','VICTOROPS': 'VictorOpsNotificationChannelResponseV1','WEBHOOK': 'WebhookNotificationChannelResponseV1'
    }

    @classmethod
    def get_discriminator_value(cls, obj: Dict[str, Any]) -> Optional[str]:
        """Returns the discriminator value (object type) of the data"""
        discriminator_value = obj[cls.__discriminator_property_name]
        if discriminator_value:
            return cls.__discriminator_value_class_map.get(discriminator_value)
        else:
            return None

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Union[CustomWebhookNotificationChannelResponseV1, EmailNotificationChannelResponseV1, GchatNotificationChannelResponseV1, IbmEventNotificationsNotificationChannelResponseV1, MsTeamsNotificationChannelResponseV1, OpsgenieNotificationChannelResponseV1, PagerDutyNotificationChannelResponseV1, PrometheusAlertManagerNotificationChannelResponseV1, SlackNotificationChannelResponseV1, SnsNotificationChannelResponseV1, TeamEmailNotificationChannelResponseV1, VictorOpsNotificationChannelResponseV1, WebhookNotificationChannelResponseV1]]:
        """Create an instance of NotificationChannelResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if team_id (nullable) is None
        # and model_fields_set contains the field
        if self.team_id is None and "team_id" in self.model_fields_set:
            _dict['teamId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Optional[Union[CustomWebhookNotificationChannelResponseV1, EmailNotificationChannelResponseV1, GchatNotificationChannelResponseV1, IbmEventNotificationsNotificationChannelResponseV1, MsTeamsNotificationChannelResponseV1, OpsgenieNotificationChannelResponseV1, PagerDutyNotificationChannelResponseV1, PrometheusAlertManagerNotificationChannelResponseV1, SlackNotificationChannelResponseV1, SnsNotificationChannelResponseV1, TeamEmailNotificationChannelResponseV1, VictorOpsNotificationChannelResponseV1, WebhookNotificationChannelResponseV1]]:
        """Create an instance of NotificationChannelResponseV1 from a dict"""
        # look up the object type based on discriminator mapping
        object_type = cls.get_discriminator_value(obj)
        if object_type ==  'CustomWebhookNotificationChannelResponseV1':
            return import_module("sysdig_client.models.custom_webhook_notification_channel_response_v1").CustomWebhookNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'EmailNotificationChannelResponseV1':
            return import_module("sysdig_client.models.email_notification_channel_response_v1").EmailNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'GchatNotificationChannelResponseV1':
            return import_module("sysdig_client.models.gchat_notification_channel_response_v1").GchatNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'IbmEventNotificationsNotificationChannelResponseV1':
            return import_module("sysdig_client.models.ibm_event_notifications_notification_channel_response_v1").IbmEventNotificationsNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'MsTeamsNotificationChannelResponseV1':
            return import_module("sysdig_client.models.ms_teams_notification_channel_response_v1").MsTeamsNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'OpsgenieNotificationChannelResponseV1':
            return import_module("sysdig_client.models.opsgenie_notification_channel_response_v1").OpsgenieNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'PagerDutyNotificationChannelResponseV1':
            return import_module("sysdig_client.models.pager_duty_notification_channel_response_v1").PagerDutyNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'PrometheusAlertManagerNotificationChannelResponseV1':
            return import_module("sysdig_client.models.prometheus_alert_manager_notification_channel_response_v1").PrometheusAlertManagerNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'SlackNotificationChannelResponseV1':
            return import_module("sysdig_client.models.slack_notification_channel_response_v1").SlackNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'SnsNotificationChannelResponseV1':
            return import_module("sysdig_client.models.sns_notification_channel_response_v1").SnsNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'TeamEmailNotificationChannelResponseV1':
            return import_module("sysdig_client.models.team_email_notification_channel_response_v1").TeamEmailNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'VictorOpsNotificationChannelResponseV1':
            return import_module("sysdig_client.models.victor_ops_notification_channel_response_v1").VictorOpsNotificationChannelResponseV1.from_dict(obj)
        if object_type ==  'WebhookNotificationChannelResponseV1':
            return import_module("sysdig_client.models.webhook_notification_channel_response_v1").WebhookNotificationChannelResponseV1.from_dict(obj)

        raise ValueError("NotificationChannelResponseV1 failed to lookup discriminator value from " +
                            json.dumps(obj) + ". Discriminator property name: " + cls.__discriminator_property_name +
                            ", mapping: " + json.dumps(cls.__discriminator_value_class_map))


