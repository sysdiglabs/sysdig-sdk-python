# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
from inspect import getfullargspec
import json
import pprint
import re  # noqa: F401
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Optional
from sysdig_client.models.cisa_kev_available_since import CisaKevAvailableSince
from sysdig_client.models.cisa_kev_known_ransomware_campaign_use import CisaKevKnownRansomwareCampaignUse
from sysdig_client.models.cisa_kev_publish_date import CisaKevPublishDate
from sysdig_client.models.deny_cve import DenyCve
from sysdig_client.models.deny_pkg import DenyPkg
from sysdig_client.models.image_config_creation_date_with_age import ImageConfigCreationDateWithAge
from sysdig_client.models.image_config_default_user_is_not import ImageConfigDefaultUserIsNot
from sysdig_client.models.image_config_default_user_is_root import ImageConfigDefaultUserIsRoot
from sysdig_client.models.image_config_default_user_list import ImageConfigDefaultUserList
from sysdig_client.models.image_config_env_variable_contains import ImageConfigEnvVariableContains
from sysdig_client.models.image_config_env_variable_exists import ImageConfigEnvVariableExists
from sysdig_client.models.image_config_env_variable_not_exists import ImageConfigEnvVariableNotExists
from sysdig_client.models.image_config_instruction_is_pkg_manager import ImageConfigInstructionIsPkgManager
from sysdig_client.models.image_config_instruction_not_recommended import ImageConfigInstructionNotRecommended
from sysdig_client.models.image_config_label_exists import ImageConfigLabelExists
from sysdig_client.models.image_config_label_not_contains import ImageConfigLabelNotContains
from sysdig_client.models.image_config_label_not_exists import ImageConfigLabelNotExists
from sysdig_client.models.image_config_sensitive_information_and_secrets import ImageConfigSensitiveInformationAndSecrets
from sysdig_client.models.vuln_age import VulnAge
from sysdig_client.models.vuln_cvss import VulnCvss
from sysdig_client.models.vuln_cvss_equals import VulnCvssEquals
from sysdig_client.models.vuln_disclosure_range import VulnDisclosureRange
from sysdig_client.models.vuln_epss_percentile_gte import VulnEpssPercentileGte
from sysdig_client.models.vuln_epss_score_gte import VulnEpssScoreGte
from sysdig_client.models.vuln_exploitable import VulnExploitable
from sysdig_client.models.vuln_exploitable_no_admin import VulnExploitableNoAdmin
from sysdig_client.models.vuln_exploitable_no_user import VulnExploitableNoUser
from sysdig_client.models.vuln_exploitable_via_network import VulnExploitableViaNetwork
from sysdig_client.models.vuln_exploitable_with_age import VulnExploitableWithAge
from sysdig_client.models.vuln_is_fixable import VulnIsFixable
from sysdig_client.models.vuln_is_fixable_with_age import VulnIsFixableWithAge
from sysdig_client.models.vuln_is_in_use import VulnIsInUse
from sysdig_client.models.vuln_pkg_type import VulnPkgType
from sysdig_client.models.vuln_severity import VulnSeverity
from sysdig_client.models.vuln_severity_equals import VulnSeverityEquals
from typing import Union, Any, List, Set, TYPE_CHECKING, Optional, Dict
from typing_extensions import Literal, Self
from pydantic import Field

PREDICATESINNER_ANY_OF_SCHEMAS = ["CisaKevAvailableSince", "CisaKevKnownRansomwareCampaignUse", "CisaKevPublishDate", "DenyCve", "DenyPkg", "ImageConfigCreationDateWithAge", "ImageConfigDefaultUserIsNot", "ImageConfigDefaultUserIsRoot", "ImageConfigDefaultUserList", "ImageConfigEnvVariableContains", "ImageConfigEnvVariableExists", "ImageConfigEnvVariableNotExists", "ImageConfigInstructionIsPkgManager", "ImageConfigInstructionNotRecommended", "ImageConfigLabelExists", "ImageConfigLabelNotContains", "ImageConfigLabelNotExists", "ImageConfigSensitiveInformationAndSecrets", "VulnAge", "VulnCvss", "VulnCvssEquals", "VulnDisclosureRange", "VulnEpssPercentileGte", "VulnEpssScoreGte", "VulnExploitable", "VulnExploitableNoAdmin", "VulnExploitableNoUser", "VulnExploitableViaNetwork", "VulnExploitableWithAge", "VulnIsFixable", "VulnIsFixableWithAge", "VulnIsInUse", "VulnPkgType", "VulnSeverity", "VulnSeverityEquals"]

class PredicatesInner(BaseModel):
    """
    PredicatesInner
    """

    # data type: VulnSeverity
    anyof_schema_1_validator: Optional[VulnSeverity] = None
    # data type: VulnSeverityEquals
    anyof_schema_2_validator: Optional[VulnSeverityEquals] = None
    # data type: VulnIsFixable
    anyof_schema_3_validator: Optional[VulnIsFixable] = None
    # data type: VulnIsFixableWithAge
    anyof_schema_4_validator: Optional[VulnIsFixableWithAge] = None
    # data type: VulnAge
    anyof_schema_5_validator: Optional[VulnAge] = None
    # data type: VulnPkgType
    anyof_schema_6_validator: Optional[VulnPkgType] = None
    # data type: VulnCvss
    anyof_schema_7_validator: Optional[VulnCvss] = None
    # data type: VulnCvssEquals
    anyof_schema_8_validator: Optional[VulnCvssEquals] = None
    # data type: VulnExploitable
    anyof_schema_9_validator: Optional[VulnExploitable] = None
    # data type: VulnExploitableWithAge
    anyof_schema_10_validator: Optional[VulnExploitableWithAge] = None
    # data type: VulnExploitableNoAdmin
    anyof_schema_11_validator: Optional[VulnExploitableNoAdmin] = None
    # data type: VulnExploitableNoUser
    anyof_schema_12_validator: Optional[VulnExploitableNoUser] = None
    # data type: VulnExploitableViaNetwork
    anyof_schema_13_validator: Optional[VulnExploitableViaNetwork] = None
    # data type: VulnDisclosureRange
    anyof_schema_14_validator: Optional[VulnDisclosureRange] = None
    # data type: VulnIsInUse
    anyof_schema_15_validator: Optional[VulnIsInUse] = None
    # data type: VulnEpssScoreGte
    anyof_schema_16_validator: Optional[VulnEpssScoreGte] = None
    # data type: VulnEpssPercentileGte
    anyof_schema_17_validator: Optional[VulnEpssPercentileGte] = None
    # data type: CisaKevPublishDate
    anyof_schema_18_validator: Optional[CisaKevPublishDate] = None
    # data type: CisaKevKnownRansomwareCampaignUse
    anyof_schema_19_validator: Optional[CisaKevKnownRansomwareCampaignUse] = None
    # data type: CisaKevAvailableSince
    anyof_schema_20_validator: Optional[CisaKevAvailableSince] = None
    # data type: DenyCve
    anyof_schema_21_validator: Optional[DenyCve] = None
    # data type: DenyPkg
    anyof_schema_22_validator: Optional[DenyPkg] = None
    # data type: ImageConfigDefaultUserList
    anyof_schema_23_validator: Optional[ImageConfigDefaultUserList] = None
    # data type: ImageConfigDefaultUserIsRoot
    anyof_schema_24_validator: Optional[ImageConfigDefaultUserIsRoot] = None
    # data type: ImageConfigDefaultUserIsNot
    anyof_schema_25_validator: Optional[ImageConfigDefaultUserIsNot] = None
    # data type: ImageConfigLabelExists
    anyof_schema_26_validator: Optional[ImageConfigLabelExists] = None
    # data type: ImageConfigLabelNotExists
    anyof_schema_27_validator: Optional[ImageConfigLabelNotExists] = None
    # data type: ImageConfigLabelNotContains
    anyof_schema_28_validator: Optional[ImageConfigLabelNotContains] = None
    # data type: ImageConfigEnvVariableExists
    anyof_schema_29_validator: Optional[ImageConfigEnvVariableExists] = None
    # data type: ImageConfigEnvVariableNotExists
    anyof_schema_30_validator: Optional[ImageConfigEnvVariableNotExists] = None
    # data type: ImageConfigEnvVariableContains
    anyof_schema_31_validator: Optional[ImageConfigEnvVariableContains] = None
    # data type: ImageConfigInstructionNotRecommended
    anyof_schema_32_validator: Optional[ImageConfigInstructionNotRecommended] = None
    # data type: ImageConfigInstructionIsPkgManager
    anyof_schema_33_validator: Optional[ImageConfigInstructionIsPkgManager] = None
    # data type: ImageConfigCreationDateWithAge
    anyof_schema_34_validator: Optional[ImageConfigCreationDateWithAge] = None
    # data type: ImageConfigSensitiveInformationAndSecrets
    anyof_schema_35_validator: Optional[ImageConfigSensitiveInformationAndSecrets] = None
    if TYPE_CHECKING:
        actual_instance: Optional[Union[CisaKevAvailableSince, CisaKevKnownRansomwareCampaignUse, CisaKevPublishDate, DenyCve, DenyPkg, ImageConfigCreationDateWithAge, ImageConfigDefaultUserIsNot, ImageConfigDefaultUserIsRoot, ImageConfigDefaultUserList, ImageConfigEnvVariableContains, ImageConfigEnvVariableExists, ImageConfigEnvVariableNotExists, ImageConfigInstructionIsPkgManager, ImageConfigInstructionNotRecommended, ImageConfigLabelExists, ImageConfigLabelNotContains, ImageConfigLabelNotExists, ImageConfigSensitiveInformationAndSecrets, VulnAge, VulnCvss, VulnCvssEquals, VulnDisclosureRange, VulnEpssPercentileGte, VulnEpssScoreGte, VulnExploitable, VulnExploitableNoAdmin, VulnExploitableNoUser, VulnExploitableViaNetwork, VulnExploitableWithAge, VulnIsFixable, VulnIsFixableWithAge, VulnIsInUse, VulnPkgType, VulnSeverity, VulnSeverityEquals]] = None
    else:
        actual_instance: Any = None
    any_of_schemas: Set[str] = { "CisaKevAvailableSince", "CisaKevKnownRansomwareCampaignUse", "CisaKevPublishDate", "DenyCve", "DenyPkg", "ImageConfigCreationDateWithAge", "ImageConfigDefaultUserIsNot", "ImageConfigDefaultUserIsRoot", "ImageConfigDefaultUserList", "ImageConfigEnvVariableContains", "ImageConfigEnvVariableExists", "ImageConfigEnvVariableNotExists", "ImageConfigInstructionIsPkgManager", "ImageConfigInstructionNotRecommended", "ImageConfigLabelExists", "ImageConfigLabelNotContains", "ImageConfigLabelNotExists", "ImageConfigSensitiveInformationAndSecrets", "VulnAge", "VulnCvss", "VulnCvssEquals", "VulnDisclosureRange", "VulnEpssPercentileGte", "VulnEpssScoreGte", "VulnExploitable", "VulnExploitableNoAdmin", "VulnExploitableNoUser", "VulnExploitableViaNetwork", "VulnExploitableWithAge", "VulnIsFixable", "VulnIsFixableWithAge", "VulnIsInUse", "VulnPkgType", "VulnSeverity", "VulnSeverityEquals" }

    model_config = {
        "validate_assignment": True,
        "protected_namespaces": (),
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_anyof(cls, v):
        instance = PredicatesInner.model_construct()
        error_messages = []
        # validate data type: VulnSeverity
        if not isinstance(v, VulnSeverity):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnSeverity`")
        else:
            return v

        # validate data type: VulnSeverityEquals
        if not isinstance(v, VulnSeverityEquals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnSeverityEquals`")
        else:
            return v

        # validate data type: VulnIsFixable
        if not isinstance(v, VulnIsFixable):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnIsFixable`")
        else:
            return v

        # validate data type: VulnIsFixableWithAge
        if not isinstance(v, VulnIsFixableWithAge):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnIsFixableWithAge`")
        else:
            return v

        # validate data type: VulnAge
        if not isinstance(v, VulnAge):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnAge`")
        else:
            return v

        # validate data type: VulnPkgType
        if not isinstance(v, VulnPkgType):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnPkgType`")
        else:
            return v

        # validate data type: VulnCvss
        if not isinstance(v, VulnCvss):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnCvss`")
        else:
            return v

        # validate data type: VulnCvssEquals
        if not isinstance(v, VulnCvssEquals):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnCvssEquals`")
        else:
            return v

        # validate data type: VulnExploitable
        if not isinstance(v, VulnExploitable):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnExploitable`")
        else:
            return v

        # validate data type: VulnExploitableWithAge
        if not isinstance(v, VulnExploitableWithAge):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnExploitableWithAge`")
        else:
            return v

        # validate data type: VulnExploitableNoAdmin
        if not isinstance(v, VulnExploitableNoAdmin):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnExploitableNoAdmin`")
        else:
            return v

        # validate data type: VulnExploitableNoUser
        if not isinstance(v, VulnExploitableNoUser):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnExploitableNoUser`")
        else:
            return v

        # validate data type: VulnExploitableViaNetwork
        if not isinstance(v, VulnExploitableViaNetwork):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnExploitableViaNetwork`")
        else:
            return v

        # validate data type: VulnDisclosureRange
        if not isinstance(v, VulnDisclosureRange):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnDisclosureRange`")
        else:
            return v

        # validate data type: VulnIsInUse
        if not isinstance(v, VulnIsInUse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnIsInUse`")
        else:
            return v

        # validate data type: VulnEpssScoreGte
        if not isinstance(v, VulnEpssScoreGte):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnEpssScoreGte`")
        else:
            return v

        # validate data type: VulnEpssPercentileGte
        if not isinstance(v, VulnEpssPercentileGte):
            error_messages.append(f"Error! Input type `{type(v)}` is not `VulnEpssPercentileGte`")
        else:
            return v

        # validate data type: CisaKevPublishDate
        if not isinstance(v, CisaKevPublishDate):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CisaKevPublishDate`")
        else:
            return v

        # validate data type: CisaKevKnownRansomwareCampaignUse
        if not isinstance(v, CisaKevKnownRansomwareCampaignUse):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CisaKevKnownRansomwareCampaignUse`")
        else:
            return v

        # validate data type: CisaKevAvailableSince
        if not isinstance(v, CisaKevAvailableSince):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CisaKevAvailableSince`")
        else:
            return v

        # validate data type: DenyCve
        if not isinstance(v, DenyCve):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DenyCve`")
        else:
            return v

        # validate data type: DenyPkg
        if not isinstance(v, DenyPkg):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DenyPkg`")
        else:
            return v

        # validate data type: ImageConfigDefaultUserList
        if not isinstance(v, ImageConfigDefaultUserList):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigDefaultUserList`")
        else:
            return v

        # validate data type: ImageConfigDefaultUserIsRoot
        if not isinstance(v, ImageConfigDefaultUserIsRoot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigDefaultUserIsRoot`")
        else:
            return v

        # validate data type: ImageConfigDefaultUserIsNot
        if not isinstance(v, ImageConfigDefaultUserIsNot):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigDefaultUserIsNot`")
        else:
            return v

        # validate data type: ImageConfigLabelExists
        if not isinstance(v, ImageConfigLabelExists):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigLabelExists`")
        else:
            return v

        # validate data type: ImageConfigLabelNotExists
        if not isinstance(v, ImageConfigLabelNotExists):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigLabelNotExists`")
        else:
            return v

        # validate data type: ImageConfigLabelNotContains
        if not isinstance(v, ImageConfigLabelNotContains):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigLabelNotContains`")
        else:
            return v

        # validate data type: ImageConfigEnvVariableExists
        if not isinstance(v, ImageConfigEnvVariableExists):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigEnvVariableExists`")
        else:
            return v

        # validate data type: ImageConfigEnvVariableNotExists
        if not isinstance(v, ImageConfigEnvVariableNotExists):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigEnvVariableNotExists`")
        else:
            return v

        # validate data type: ImageConfigEnvVariableContains
        if not isinstance(v, ImageConfigEnvVariableContains):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigEnvVariableContains`")
        else:
            return v

        # validate data type: ImageConfigInstructionNotRecommended
        if not isinstance(v, ImageConfigInstructionNotRecommended):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigInstructionNotRecommended`")
        else:
            return v

        # validate data type: ImageConfigInstructionIsPkgManager
        if not isinstance(v, ImageConfigInstructionIsPkgManager):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigInstructionIsPkgManager`")
        else:
            return v

        # validate data type: ImageConfigCreationDateWithAge
        if not isinstance(v, ImageConfigCreationDateWithAge):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigCreationDateWithAge`")
        else:
            return v

        # validate data type: ImageConfigSensitiveInformationAndSecrets
        if not isinstance(v, ImageConfigSensitiveInformationAndSecrets):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ImageConfigSensitiveInformationAndSecrets`")
        else:
            return v

        if error_messages:
            # no match
            raise ValueError("No match found when setting the actual_instance in PredicatesInner with anyOf schemas: CisaKevAvailableSince, CisaKevKnownRansomwareCampaignUse, CisaKevPublishDate, DenyCve, DenyPkg, ImageConfigCreationDateWithAge, ImageConfigDefaultUserIsNot, ImageConfigDefaultUserIsRoot, ImageConfigDefaultUserList, ImageConfigEnvVariableContains, ImageConfigEnvVariableExists, ImageConfigEnvVariableNotExists, ImageConfigInstructionIsPkgManager, ImageConfigInstructionNotRecommended, ImageConfigLabelExists, ImageConfigLabelNotContains, ImageConfigLabelNotExists, ImageConfigSensitiveInformationAndSecrets, VulnAge, VulnCvss, VulnCvssEquals, VulnDisclosureRange, VulnEpssPercentileGte, VulnEpssScoreGte, VulnExploitable, VulnExploitableNoAdmin, VulnExploitableNoUser, VulnExploitableViaNetwork, VulnExploitableWithAge, VulnIsFixable, VulnIsFixableWithAge, VulnIsInUse, VulnPkgType, VulnSeverity, VulnSeverityEquals. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Dict[str, Any]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        # anyof_schema_1_validator: Optional[VulnSeverity] = None
        try:
            instance.actual_instance = VulnSeverity.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_2_validator: Optional[VulnSeverityEquals] = None
        try:
            instance.actual_instance = VulnSeverityEquals.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_3_validator: Optional[VulnIsFixable] = None
        try:
            instance.actual_instance = VulnIsFixable.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_4_validator: Optional[VulnIsFixableWithAge] = None
        try:
            instance.actual_instance = VulnIsFixableWithAge.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_5_validator: Optional[VulnAge] = None
        try:
            instance.actual_instance = VulnAge.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_6_validator: Optional[VulnPkgType] = None
        try:
            instance.actual_instance = VulnPkgType.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_7_validator: Optional[VulnCvss] = None
        try:
            instance.actual_instance = VulnCvss.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_8_validator: Optional[VulnCvssEquals] = None
        try:
            instance.actual_instance = VulnCvssEquals.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_9_validator: Optional[VulnExploitable] = None
        try:
            instance.actual_instance = VulnExploitable.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_10_validator: Optional[VulnExploitableWithAge] = None
        try:
            instance.actual_instance = VulnExploitableWithAge.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_11_validator: Optional[VulnExploitableNoAdmin] = None
        try:
            instance.actual_instance = VulnExploitableNoAdmin.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_12_validator: Optional[VulnExploitableNoUser] = None
        try:
            instance.actual_instance = VulnExploitableNoUser.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_13_validator: Optional[VulnExploitableViaNetwork] = None
        try:
            instance.actual_instance = VulnExploitableViaNetwork.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_14_validator: Optional[VulnDisclosureRange] = None
        try:
            instance.actual_instance = VulnDisclosureRange.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_15_validator: Optional[VulnIsInUse] = None
        try:
            instance.actual_instance = VulnIsInUse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_16_validator: Optional[VulnEpssScoreGte] = None
        try:
            instance.actual_instance = VulnEpssScoreGte.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_17_validator: Optional[VulnEpssPercentileGte] = None
        try:
            instance.actual_instance = VulnEpssPercentileGte.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_18_validator: Optional[CisaKevPublishDate] = None
        try:
            instance.actual_instance = CisaKevPublishDate.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_19_validator: Optional[CisaKevKnownRansomwareCampaignUse] = None
        try:
            instance.actual_instance = CisaKevKnownRansomwareCampaignUse.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_20_validator: Optional[CisaKevAvailableSince] = None
        try:
            instance.actual_instance = CisaKevAvailableSince.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_21_validator: Optional[DenyCve] = None
        try:
            instance.actual_instance = DenyCve.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_22_validator: Optional[DenyPkg] = None
        try:
            instance.actual_instance = DenyPkg.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_23_validator: Optional[ImageConfigDefaultUserList] = None
        try:
            instance.actual_instance = ImageConfigDefaultUserList.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_24_validator: Optional[ImageConfigDefaultUserIsRoot] = None
        try:
            instance.actual_instance = ImageConfigDefaultUserIsRoot.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_25_validator: Optional[ImageConfigDefaultUserIsNot] = None
        try:
            instance.actual_instance = ImageConfigDefaultUserIsNot.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_26_validator: Optional[ImageConfigLabelExists] = None
        try:
            instance.actual_instance = ImageConfigLabelExists.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_27_validator: Optional[ImageConfigLabelNotExists] = None
        try:
            instance.actual_instance = ImageConfigLabelNotExists.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_28_validator: Optional[ImageConfigLabelNotContains] = None
        try:
            instance.actual_instance = ImageConfigLabelNotContains.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_29_validator: Optional[ImageConfigEnvVariableExists] = None
        try:
            instance.actual_instance = ImageConfigEnvVariableExists.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_30_validator: Optional[ImageConfigEnvVariableNotExists] = None
        try:
            instance.actual_instance = ImageConfigEnvVariableNotExists.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_31_validator: Optional[ImageConfigEnvVariableContains] = None
        try:
            instance.actual_instance = ImageConfigEnvVariableContains.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_32_validator: Optional[ImageConfigInstructionNotRecommended] = None
        try:
            instance.actual_instance = ImageConfigInstructionNotRecommended.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_33_validator: Optional[ImageConfigInstructionIsPkgManager] = None
        try:
            instance.actual_instance = ImageConfigInstructionIsPkgManager.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_34_validator: Optional[ImageConfigCreationDateWithAge] = None
        try:
            instance.actual_instance = ImageConfigCreationDateWithAge.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))
        # anyof_schema_35_validator: Optional[ImageConfigSensitiveInformationAndSecrets] = None
        try:
            instance.actual_instance = ImageConfigSensitiveInformationAndSecrets.from_json(json_str)
            return instance
        except (ValidationError, ValueError) as e:
             error_messages.append(str(e))

        if error_messages:
            # no match
            raise ValueError("No match found when deserializing the JSON string into PredicatesInner with anyOf schemas: CisaKevAvailableSince, CisaKevKnownRansomwareCampaignUse, CisaKevPublishDate, DenyCve, DenyPkg, ImageConfigCreationDateWithAge, ImageConfigDefaultUserIsNot, ImageConfigDefaultUserIsRoot, ImageConfigDefaultUserList, ImageConfigEnvVariableContains, ImageConfigEnvVariableExists, ImageConfigEnvVariableNotExists, ImageConfigInstructionIsPkgManager, ImageConfigInstructionNotRecommended, ImageConfigLabelExists, ImageConfigLabelNotContains, ImageConfigLabelNotExists, ImageConfigSensitiveInformationAndSecrets, VulnAge, VulnCvss, VulnCvssEquals, VulnDisclosureRange, VulnEpssPercentileGte, VulnEpssScoreGte, VulnExploitable, VulnExploitableNoAdmin, VulnExploitableNoUser, VulnExploitableViaNetwork, VulnExploitableWithAge, VulnIsFixable, VulnIsFixableWithAge, VulnIsInUse, VulnPkgType, VulnSeverity, VulnSeverityEquals. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CisaKevAvailableSince, CisaKevKnownRansomwareCampaignUse, CisaKevPublishDate, DenyCve, DenyPkg, ImageConfigCreationDateWithAge, ImageConfigDefaultUserIsNot, ImageConfigDefaultUserIsRoot, ImageConfigDefaultUserList, ImageConfigEnvVariableContains, ImageConfigEnvVariableExists, ImageConfigEnvVariableNotExists, ImageConfigInstructionIsPkgManager, ImageConfigInstructionNotRecommended, ImageConfigLabelExists, ImageConfigLabelNotContains, ImageConfigLabelNotExists, ImageConfigSensitiveInformationAndSecrets, VulnAge, VulnCvss, VulnCvssEquals, VulnDisclosureRange, VulnEpssPercentileGte, VulnEpssScoreGte, VulnExploitable, VulnExploitableNoAdmin, VulnExploitableNoUser, VulnExploitableViaNetwork, VulnExploitableWithAge, VulnIsFixable, VulnIsFixableWithAge, VulnIsInUse, VulnPkgType, VulnSeverity, VulnSeverityEquals]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


