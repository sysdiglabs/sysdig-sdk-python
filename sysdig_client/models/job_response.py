# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.time_frame import TimeFrame
from typing import Optional, Set
from typing_extensions import Self

class JobResponse(BaseModel):
    """
    Schema for a job response
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Unique identifier for the job.")
    user_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the user who created the job.", alias="userId")
    team_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the team the job was created under.", alias="teamId")
    customer_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the user associated with the job.", alias="customerId")
    iac_task_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of the IAC scheduled task.", alias="iacTaskId")
    schedule_id: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="ID of the schedule associated with the job", alias="scheduleId")
    report_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the report", alias="reportId")
    is_report_template: StrictBool = Field(description="Indicates if the report is a template", alias="isReportTemplate")
    report_format: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Format of the report", alias="reportFormat")
    job_type: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Type of the job", alias="jobType")
    job_name: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Name of the job", alias="jobName")
    zones: Annotated[List[Annotated[int, Field(le=2147483647, strict=True, ge=0)]], Field(max_length=10000)] = Field(description="List of zone IDs")
    policies: Optional[Annotated[List[Annotated[int, Field(le=2147483647, strict=True, ge=0)]], Field(max_length=10000)]] = Field(default=None, description="List of policy IDs")
    status: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Status of the job")
    timezone: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="Timezone of the request time frame")
    time_frame: Optional[TimeFrame] = Field(default=None, alias="timeFrame")
    file_name: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="File name of the report", alias="fileName")
    file_path: Optional[Annotated[str, Field(strict=True, max_length=4096)]] = Field(default=None, description="File path of the report", alias="filePath")
    created_by: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Email of the user who created the job", alias="createdBy")
    scheduled_on: datetime = Field(description="Timestamp when the job was scheduled", alias="scheduledOn")
    started_on: Optional[datetime] = Field(default=None, description="Timestamp when the job was started", alias="startedOn")
    completed_on: Optional[datetime] = Field(default=None, description="Timestamp when the job was completed", alias="completedOn")
    __properties: ClassVar[List[str]] = ["id", "userId", "teamId", "customerId", "iacTaskId", "scheduleId", "reportId", "isReportTemplate", "reportFormat", "jobType", "jobName", "zones", "policies", "status", "timezone", "timeFrame", "fileName", "filePath", "createdBy", "scheduledOn", "startedOn", "completedOn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of JobResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of time_frame
        if self.time_frame:
            _dict['timeFrame'] = self.time_frame.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of JobResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "teamId": obj.get("teamId"),
            "customerId": obj.get("customerId"),
            "iacTaskId": obj.get("iacTaskId"),
            "scheduleId": obj.get("scheduleId"),
            "reportId": obj.get("reportId"),
            "isReportTemplate": obj.get("isReportTemplate"),
            "reportFormat": obj.get("reportFormat"),
            "jobType": obj.get("jobType"),
            "jobName": obj.get("jobName"),
            "zones": obj.get("zones"),
            "policies": obj.get("policies"),
            "status": obj.get("status"),
            "timezone": obj.get("timezone"),
            "timeFrame": TimeFrame.from_dict(obj["timeFrame"]) if obj.get("timeFrame") is not None else None,
            "fileName": obj.get("fileName"),
            "filePath": obj.get("filePath"),
            "createdBy": obj.get("createdBy"),
            "scheduledOn": obj.get("scheduledOn"),
            "startedOn": obj.get("startedOn"),
            "completedOn": obj.get("completedOn")
        })
        return _obj


