# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.agentless_runtime_detection_content_all_of_fields import AgentlessRuntimeDetectionContentAllOfFields
from sysdig_client.models.event_content_type import EventContentType
from sysdig_client.models.policy_origin import PolicyOrigin
from typing import Optional, Set
from typing_extensions import Self

class AgentlessRuntimeDetectionContent(BaseModel):
    """
    Agentless CDR event content
    """ # noqa: E501
    type: EventContentType
    integration_id: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The unique identifier of the integration that generated the event.", alias="integrationId")
    integration_type: StrictStr = Field(description="The type of integration that generated the event.", alias="integrationType")
    rule_name: Annotated[str, Field(strict=True, max_length=1024)] = Field(description="Name of the rule the event is generated after", alias="ruleName")
    rule_type: Annotated[int, Field(le=14, strict=True, ge=1)] = Field(description="Rule type: - 1 - List matching - process - 2 - List matching - container - 3 - List matching - file - 4 - List matching - network - 5 - List matching - syscall - 6 - Falco - 7 - Drift detection - 8 - Malware detection - 11 - ML - Cryptominer detection - 13 - ML - AWS anomalous login - 14 - ML - Okta anomalous login ", alias="ruleType")
    rule_tags: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=128)]], Field(max_length=1000)]] = Field(default=None, description="The tags attached to the rule", alias="ruleTags")
    policy_id: Annotated[int, Field(le=9223372036854775616, strict=True, ge=1)] = Field(description="ID of the policy that generated the event", alias="policyId")
    policy_origin: PolicyOrigin = Field(alias="policyOrigin")
    policy_notification_channel_ids: Optional[Annotated[List[Annotated[int, Field(le=9223372036854775616, strict=True, ge=1)]], Field(max_length=100)]] = Field(default=None, description="The list of notification channels where an alert is sent after event is generated. Doesn't account for aggregations and eventual thresholds. ", alias="policyNotificationChannelIds")
    priority: Optional[StrictStr] = Field(default=None, description="Rule priority")
    output: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="Event output, generated after the configured rule")
    fields: Optional[AgentlessRuntimeDetectionContentAllOfFields] = None
    __properties: ClassVar[List[str]] = ["type", "integrationId", "integrationType", "ruleName", "ruleType", "ruleTags", "policyId", "policyOrigin", "policyNotificationChannelIds", "priority", "output", "fields"]

    @field_validator('integration_type')
    def integration_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['cloudtrail', 'okta', 'github', 'gcp', 'azure', 'entra']):
            raise ValueError("must be one of enum values ('cloudtrail', 'okta', 'github', 'gcp', 'azure', 'entra')")
        return value

    @field_validator('priority')
    def priority_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value
        
        # convert to lower case to match enum values
        value = value.lower()
        if value not in set(['emergency', 'alert', 'critical', 'error', 'warning', 'informational', 'notice', 'debug']):
            raise ValueError("must be one of enum values ('emergency', 'alert', 'critical', 'error', 'warning', 'informational', 'notice', 'debug')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AgentlessRuntimeDetectionContent from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of fields
        if self.fields:
            _dict['fields'] = self.fields.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AgentlessRuntimeDetectionContent from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "integrationId": obj.get("integrationId"),
            "integrationType": obj.get("integrationType"),
            "ruleName": obj.get("ruleName"),
            "ruleType": obj.get("ruleType"),
            "ruleTags": obj.get("ruleTags"),
            "policyId": obj.get("policyId"),
            "policyOrigin": obj.get("policyOrigin"),
            "policyNotificationChannelIds": obj.get("policyNotificationChannelIds"),
            "priority": obj.get("priority").lower(),
            "output": obj.get("output"),
            "fields": AgentlessRuntimeDetectionContentAllOfFields.from_dict(obj["fields"]) if obj.get("fields") is not None else None
        })
        return _obj


