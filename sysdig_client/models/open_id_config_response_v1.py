# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.open_id_metadata_v1 import OpenIdMetadataV1
from sysdig_client.models.sso_settings_response_base_v1 import SsoSettingsResponseBaseV1
from sysdig_client.models.sso_type_v1 import SsoTypeV1
from typing import Optional, Set
from typing_extensions import Self

class OpenIdConfigResponseV1(SsoSettingsResponseBaseV1):
    """
    OpenIdConfigResponseV1
    """ # noqa: E501
    issuer_url: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="The issuer URL of the OpenID Connect provider.", alias="issuerUrl")
    client_id: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="The client ID of the OpenID Connect provider.", alias="clientId")
    is_metadata_discovery_enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the metadata discovery is enabled.", alias="isMetadataDiscoveryEnabled")
    metadata: Optional[OpenIdMetadataV1] = Field(default=None, description="The metadata of the OpenID Connect provider.")
    group_attribute_name: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The group attribute name of the OpenID Connect provider.", alias="groupAttributeName")
    is_additional_scopes_check_enabled: Optional[StrictBool] = Field(default=None, description="Flag to indicate if the additional scopes verification on login.", alias="isAdditionalScopesCheckEnabled")
    additional_scopes: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=128)]], Field(max_length=128)]] = Field(default=None, description="List of additional scopes to be verified on login.", alias="additionalScopes")
    __properties: ClassVar[List[str]] = ["type", "issuerUrl", "clientId", "isMetadataDiscoveryEnabled", "metadata", "groupAttributeName", "isAdditionalScopesCheckEnabled", "additionalScopes"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of OpenIdConfigResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of OpenIdConfigResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "issuerUrl": obj.get("issuerUrl"),
            "clientId": obj.get("clientId"),
            "isMetadataDiscoveryEnabled": obj.get("isMetadataDiscoveryEnabled"),
            "metadata": OpenIdMetadataV1.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "groupAttributeName": obj.get("groupAttributeName"),
            "isAdditionalScopesCheckEnabled": obj.get("isAdditionalScopesCheckEnabled"),
            "additionalScopes": obj.get("additionalScopes")
        })
        return _obj


