# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501

import warnings
from pydantic import validate_call, Field, StrictFloat, StrictStr, StrictInt
from typing import Any, Dict, List, Optional, Tuple, Union
from typing_extensions import Annotated

from pydantic import Field, StrictStr, field_validator
from typing import Optional
from typing_extensions import Annotated
from sysdig_client.models.list_jobs import ListJobs
from sysdig_client.models.list_schedules import ListSchedules

from sysdig_client.api_client import ApiClient, RequestSerialized
from sysdig_client.api_response import ApiResponse
from sysdig_client.rest import RESTResponseType


class ReportingApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client


    @validate_call
    def list_jobs_v1(
        self,
        schedule_id: Annotated[str, Field(strict=True, max_length=512, description="ID of the Schedule")],
        report_id: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="ID of the Report")] = None,
        is_report_template: Annotated[Optional[StrictStr], Field(description="Indicates whether the report is a template.")] = None,
        completed_on: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Date the job was completed in epoch milliseconds.")] = None,
        job_type: Annotated[Optional[StrictStr], Field(description="Type of the job.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the job.")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="Kind of the report.")] = None,
        policies: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8192)]], Field(description="List of policy IDs in string format.")] = None,
        zones: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8192)]], Field(description="List of zone IDs in string format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListJobs:
        """List Report Job Runs

        Retrieve a list of Report Job runs.\\ \\ **Required permissions:** platform.reporting.report-downloads.read 

        :param schedule_id: ID of the Schedule (required)
        :type schedule_id: str
        :param report_id: ID of the Report
        :type report_id: int
        :param is_report_template: Indicates whether the report is a template.
        :type is_report_template: str
        :param completed_on: Date the job was completed in epoch milliseconds.
        :type completed_on: int
        :param job_type: Type of the job.
        :type job_type: str
        :param status: Status of the job.
        :type status: str
        :param kind: Kind of the report.
        :type kind: str
        :param policies: List of policy IDs in string format.
        :type policies: str
        :param zones: List of zone IDs in string format.
        :type zones: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_jobs_v1_serialize(
            schedule_id=schedule_id,
            report_id=report_id,
            is_report_template=is_report_template,
            completed_on=completed_on,
            job_type=job_type,
            status=status,
            kind=kind,
            policies=policies,
            zones=zones,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListJobs",
            '400': "Error",
            '401': "Error",
            '422': "Error",
            '429': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_jobs_v1_with_http_info(
        self,
        schedule_id: Annotated[str, Field(strict=True, max_length=512, description="ID of the Schedule")],
        report_id: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="ID of the Report")] = None,
        is_report_template: Annotated[Optional[StrictStr], Field(description="Indicates whether the report is a template.")] = None,
        completed_on: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Date the job was completed in epoch milliseconds.")] = None,
        job_type: Annotated[Optional[StrictStr], Field(description="Type of the job.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the job.")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="Kind of the report.")] = None,
        policies: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8192)]], Field(description="List of policy IDs in string format.")] = None,
        zones: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8192)]], Field(description="List of zone IDs in string format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListJobs]:
        """List Report Job Runs

        Retrieve a list of Report Job runs.\\ \\ **Required permissions:** platform.reporting.report-downloads.read 

        :param schedule_id: ID of the Schedule (required)
        :type schedule_id: str
        :param report_id: ID of the Report
        :type report_id: int
        :param is_report_template: Indicates whether the report is a template.
        :type is_report_template: str
        :param completed_on: Date the job was completed in epoch milliseconds.
        :type completed_on: int
        :param job_type: Type of the job.
        :type job_type: str
        :param status: Status of the job.
        :type status: str
        :param kind: Kind of the report.
        :type kind: str
        :param policies: List of policy IDs in string format.
        :type policies: str
        :param zones: List of zone IDs in string format.
        :type zones: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_jobs_v1_serialize(
            schedule_id=schedule_id,
            report_id=report_id,
            is_report_template=is_report_template,
            completed_on=completed_on,
            job_type=job_type,
            status=status,
            kind=kind,
            policies=policies,
            zones=zones,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListJobs",
            '400': "Error",
            '401': "Error",
            '422': "Error",
            '429': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_jobs_v1_without_preload_content(
        self,
        schedule_id: Annotated[str, Field(strict=True, max_length=512, description="ID of the Schedule")],
        report_id: Annotated[Optional[Annotated[int, Field(le=1000000, strict=True, ge=0)]], Field(description="ID of the Report")] = None,
        is_report_template: Annotated[Optional[StrictStr], Field(description="Indicates whether the report is a template.")] = None,
        completed_on: Annotated[Optional[Annotated[int, Field(strict=True, ge=0)]], Field(description="Date the job was completed in epoch milliseconds.")] = None,
        job_type: Annotated[Optional[StrictStr], Field(description="Type of the job.")] = None,
        status: Annotated[Optional[StrictStr], Field(description="Status of the job.")] = None,
        kind: Annotated[Optional[StrictStr], Field(description="Kind of the report.")] = None,
        policies: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8192)]], Field(description="List of policy IDs in string format.")] = None,
        zones: Annotated[Optional[Annotated[str, Field(strict=True, max_length=8192)]], Field(description="List of zone IDs in string format.")] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Report Job Runs

        Retrieve a list of Report Job runs.\\ \\ **Required permissions:** platform.reporting.report-downloads.read 

        :param schedule_id: ID of the Schedule (required)
        :type schedule_id: str
        :param report_id: ID of the Report
        :type report_id: int
        :param is_report_template: Indicates whether the report is a template.
        :type is_report_template: str
        :param completed_on: Date the job was completed in epoch milliseconds.
        :type completed_on: int
        :param job_type: Type of the job.
        :type job_type: str
        :param status: Status of the job.
        :type status: str
        :param kind: Kind of the report.
        :type kind: str
        :param policies: List of policy IDs in string format.
        :type policies: str
        :param zones: List of zone IDs in string format.
        :type zones: str
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_jobs_v1_serialize(
            schedule_id=schedule_id,
            report_id=report_id,
            is_report_template=is_report_template,
            completed_on=completed_on,
            job_type=job_type,
            status=status,
            kind=kind,
            policies=policies,
            zones=zones,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListJobs",
            '400': "Error",
            '401': "Error",
            '422': "Error",
            '429': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_jobs_v1_serialize(
        self,
        schedule_id,
        report_id,
        is_report_template,
        completed_on,
        job_type,
        status,
        kind,
        policies,
        zones,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if schedule_id is not None:
            
            _query_params.append(('scheduleId', schedule_id))
            
        if report_id is not None:
            
            _query_params.append(('reportId', report_id))
            
        if is_report_template is not None:
            
            _query_params.append(('isReportTemplate', is_report_template))
            
        if completed_on is not None:
            
            _query_params.append(('completedOn', completed_on))
            
        if job_type is not None:
            
            _query_params.append(('jobType', job_type))
            
        if status is not None:
            
            _query_params.append(('status', status))
            
        if kind is not None:
            
            _query_params.append(('kind', kind))
            
        if policies is not None:
            
            _query_params.append(('policies', policies))
            
        if zones is not None:
            
            _query_params.append(('zones', zones))
            
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/platform/reporting/v1/jobs',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )




    @validate_call
    def list_schedules_v1(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ListSchedules:
        """List Report Schedules

        Retrieve a paginated list of Report Schedules.\\ \\ **Required permissions:** platform.reporting.schedules.read 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_schedules_v1_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSchedules",
            '400': "Error",
            '401': "Error",
            '422': "Error",
            '429': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data


    @validate_call
    def list_schedules_v1_with_http_info(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[ListSchedules]:
        """List Report Schedules

        Retrieve a paginated list of Report Schedules.\\ \\ **Required permissions:** platform.reporting.schedules.read 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_schedules_v1_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSchedules",
            '400': "Error",
            '401': "Error",
            '422': "Error",
            '429': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )


    @validate_call
    def list_schedules_v1_without_preload_content(
        self,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)],
                Annotated[StrictFloat, Field(gt=0)]
            ]
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """List Report Schedules

        Retrieve a paginated list of Report Schedules.\\ \\ **Required permissions:** platform.reporting.schedules.read 

        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """ # noqa: E501

        _param = self._list_schedules_v1_serialize(
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index
        )

        _response_types_map: Dict[str, Optional[str]] = {
            '200': "ListSchedules",
            '400': "Error",
            '401': "Error",
            '422': "Error",
            '429': "Error",
            '500': "Error",
        }
        response_data = self.api_client.call_api(
            *_param,
            _request_timeout=_request_timeout
        )
        return response_data.response


    def _list_schedules_v1_serialize(
        self,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {
        }

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter


        # set the HTTP header `Accept`
        if 'Accept' not in _header_params:
            _header_params['Accept'] = self.api_client.select_header_accept(
                [
                    'application/json'
                ]
            )


        # authentication setting
        _auth_settings: List[str] = [
            'bearerAuth'
        ]

        return self.api_client.param_serialize(
            method='GET',
            resource_path='/platform/reporting/v1/schedules',
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth
        )


