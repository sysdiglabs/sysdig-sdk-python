# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.team_map_v1 import TeamMapV1
from sysdig_client.models.team_role_v1 import TeamRoleV1
from typing import Optional, Set
from typing_extensions import Self

class CreateGroupMappingRequestV1(BaseModel):
    """
    CreateGroupMappingRequestV1
    """ # noqa: E501
    group_name: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The group name matching the external provider name.", alias="groupName")
    standard_team_role: Optional[TeamRoleV1] = Field(default=None, description="The standard team role assigned for the user in this team. **Mutually exclusive with customTeamRoleId**. ", alias="standardTeamRole")
    custom_team_role_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The custom team role ID assigned for the user in this team. **Mutually exclusive with standardTeamRole**. ", alias="customTeamRoleId")
    is_admin: Optional[StrictBool] = Field(default=None, description="Flag that indicates if the group is an admin group.", alias="isAdmin")
    team_map: TeamMapV1 = Field(alias="teamMap")
    weight: Optional[Annotated[int, Field(le=32767, strict=True, ge=1)]] = Field(default=32767, description="The weight of the group mapping is used to determine the priority - a lower number has higher priority.")
    __properties: ClassVar[List[str]] = ["groupName", "standardTeamRole", "customTeamRoleId", "isAdmin", "teamMap", "weight"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateGroupMappingRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of team_map
        if self.team_map:
            _dict['teamMap'] = self.team_map.to_dict()
        # set to None if standard_team_role (nullable) is None
        # and model_fields_set contains the field
        if self.standard_team_role is None and "standard_team_role" in self.model_fields_set:
            _dict['standardTeamRole'] = None

        # set to None if custom_team_role_id (nullable) is None
        # and model_fields_set contains the field
        if self.custom_team_role_id is None and "custom_team_role_id" in self.model_fields_set:
            _dict['customTeamRoleId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateGroupMappingRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "groupName": obj.get("groupName"),
            "standardTeamRole": obj.get("standardTeamRole"),
            "customTeamRoleId": obj.get("customTeamRoleId"),
            "isAdmin": obj.get("isAdmin"),
            "teamMap": TeamMapV1.from_dict(obj["teamMap"]) if obj.get("teamMap") is not None else None,
            "weight": obj.get("weight") if obj.get("weight") is not None else 32767
        })
        return _obj


