# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class QuerySysqlPostRequest(BaseModel):
    """
    QuerySysqlPostRequest
    """ # noqa: E501
    q: StrictStr = Field(description="The SysQL statement.")
    limit: Optional[Annotated[int, Field(le=1000, strict=True, ge=1)]] = Field(default=50, description="The limit parameter defines the maximum number of items returned in the result set, specifically  within the items array in the response.   This parameter is optional. The recommended approach is to define the limit directly in the SysQL  statement using the LIMIT clause. If specified in the request body, it will override the limit set  in the statement. If not specified, a default limit of 50 will be applied. ")
    offset: Optional[Annotated[int, Field(le=10000, strict=True, ge=0)]] = Field(default=0, description="The offset parameter specifies how many result set objects to skip in a MATCH statement. Use it when  you want to ignore the first few items in the result set.   This parameter is optional. The recommended approach is to set the offset directly in the SysQL  statement using the OFFSET clause. If specified in the request body, it will override the offset  in the statement. If not specified, a default offset of 0 will be applied.  Use limit and offset together in SysQL to paginate results, splitting them into pages with a defined  number of items for display. ")
    deterministic_order: Optional[StrictBool] = Field(default=False, description="The deterministic_order parameter controls whether consistent ordering is enforced in the result set.  Ordering is implicitly applied when pagination options, such as limit and offset, are specified in the  request. This is an optional parameter. ")
    __properties: ClassVar[List[str]] = ["q", "limit", "offset", "deterministic_order"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QuerySysqlPostRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QuerySysqlPostRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "q": obj.get("q"),
            "limit": obj.get("limit") if obj.get("limit") is not None else 50,
            "offset": obj.get("offset") if obj.get("offset") is not None else 0,
            "deterministic_order": obj.get("deterministic_order") if obj.get("deterministic_order") is not None else False
        })
        return _obj


