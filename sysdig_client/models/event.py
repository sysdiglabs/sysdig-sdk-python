# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.action import Action
from sysdig_client.models.category import Category
from sysdig_client.models.event_content import EventContent
from sysdig_client.models.originator import Originator
from sysdig_client.models.source import Source
from sysdig_client.models.source_details import SourceDetails
from typing import Optional, Set
from typing_extensions import Self

class Event(BaseModel):
    """
    Event feed
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The event id.")
    cursor: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The cursor that can be used to fetch a set of events surrounding this same event. By providing this value as `cursor` in a GET `secureEvents` request, you will get the set of events surrounding this current event. ")
    timestamp: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="The event timestamp in nanoseconds.")
    originator: Originator
    category: Category
    source: Source
    source_details: Optional[SourceDetails] = Field(default=None, alias="sourceDetails")
    raw_event_originator: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The agent type, hosting the `engine`, that generated the event after the raw event - `admissionController` - Admission Controller, part of the Cluster Shield - `agentless` - Agentless - `cloudConnector` - Cloud Connector - `linuxAgent` - Linux Host Agent - `serverlessAgent` - Serverless workloads Agent (CaaS) generated events - `windowsAgent` - Windows Host Agent ", alias="rawEventOriginator")
    raw_event_category: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The semantic category (area) of the event in the Sysdig product: - `kspm` -  Kubernetes Security Posture Management events - `runtime` - Threat detection events ", alias="rawEventCategory")
    engine: Optional[Annotated[str, Field(strict=True, max_length=32)]] = Field(default=None, description="The engine used to generate the event out of the raw signal: - `drift` - engine to detect container drifts  - `falco` - Falco open source engine - `list` - list matching engine for list matching rules - `machineLearning` - ML engine - `malware` - malware detection engine ")
    name: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Name of the policy the event is generated after.")
    description: Annotated[str, Field(strict=True, max_length=1024)] = Field(description="Description of the policy the event is generated after.")
    severity: Annotated[int, Field(le=7, strict=True, ge=0)] = Field(description="The policy severity: - `0-3` - High - `4-5` - Medium - `6` - Low - `7` - Info ")
    actions: Optional[Annotated[List[Action], Field(max_length=1000)]] = Field(default=None, description="actions that have been triggered by the event")
    content: Optional[EventContent] = None
    labels: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=256)]]] = Field(default=None, description="Key value pairs of values.")
    __properties: ClassVar[List[str]] = ["id", "cursor", "timestamp", "originator", "category", "source", "sourceDetails", "rawEventOriginator", "rawEventCategory", "engine", "name", "description", "severity", "actions", "content", "labels"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Event from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of source_details
        if self.source_details:
            _dict['sourceDetails'] = self.source_details.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in actions (list)
        _items = []
        if self.actions:
            for _item_actions in self.actions:
                if _item_actions:
                    _items.append(_item_actions.to_dict())
            _dict['actions'] = _items
        # override the default output from pydantic by calling `to_dict()` of content
        if self.content:
            _dict['content'] = self.content.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Event from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "cursor": obj.get("cursor"),
            "timestamp": obj.get("timestamp"),
            "originator": obj.get("originator"),
            "category": obj.get("category"),
            "source": obj.get("source"),
            "sourceDetails": SourceDetails.from_dict(obj["sourceDetails"]) if obj.get("sourceDetails") is not None else None,
            "rawEventOriginator": obj.get("rawEventOriginator"),
            "rawEventCategory": obj.get("rawEventCategory"),
            "engine": obj.get("engine"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "severity": obj.get("severity"),
            "actions": [Action.from_dict(_item) for _item in obj["actions"]] if obj.get("actions") is not None else None,
            "content": EventContent.from_dict(obj["content"]) if obj.get("content") is not None else None,
            "labels": obj.get("labels")
        })
        return _obj


