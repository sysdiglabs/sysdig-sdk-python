# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.action_execution_parameter_value import ActionExecutionParameterValue
from sysdig_client.models.action_execution_status import ActionExecutionStatus
from sysdig_client.models.failure import Failure
from typing import Optional, Set
from typing_extensions import Self

class ActionExecution(BaseModel):
    """
    The submitted Response Action.
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=128)] = Field(description="The ID of the Response Action.")
    caller_id: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The ID of the user that executed the Response action.", alias="callerId")
    action_type: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The name of the Response Action to execute. It may be one of the following: - KILL_PROCESS - KILL_CONTAINER - STOP_CONTAINER - PAUSE_CONTAINER - FILE_QUARANTINE - FILE_ACQUIRE - UNPAUSE_CONTAINER - FILE_UNQUARANTINE - START_CONTAINER  The following actions serve as the undo for previous actions: - START_CONTAINER: undo for STOP_CONTAINER\\ - UNPAUSE_CONTAINER: undo for PAUSE_CONTAINER\\ - FILE_UNQUARANTINE: undo for FILE_QUARANTINE\\  Do not use undo actions in [submitActionExecutionv1](#tag/Response-actions/operation/submitActionExecutionv1).  You can execute an undo actions using the service [undoActionExecutionV1](#tag/Response-actions/operation/undoActionExecutionV1). ", alias="actionType")
    execution_context: Dict[str, Annotated[str, Field(strict=True, max_length=1024)]] = Field(description="The context in which the Response Action is executed.\\ It may contain additional information on the Response Action being executed, such as the host name or the MAC address.\\ For example:\\ ```json {     \"host.hostName\": \"my-host\",     \"host.mac\": \"00:00:00:00:00:00\",     \"host.id\": \"abc123\" } ``` ", alias="executionContext")
    parameters: Dict[str, ActionExecutionParameterValue] = Field(description="The parameters used to request the Response Action execution.")
    outputs: Optional[Dict[str, ActionExecutionParameterValue]] = Field(default=None, description="The parameters used to request the Response Action execution.")
    failure: Optional[Failure] = None
    status: ActionExecutionStatus
    user_id: Optional[Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)]] = Field(default=None, description="The ID of the user that submitted the Response Action.", alias="userId")
    created_at: datetime = Field(description="The date and time the Response Action was submitted.", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="The date and time the Response Action was last updated.", alias="updatedAt")
    action_execution_id_being_undone: Optional[Annotated[str, Field(strict=True, max_length=128)]] = Field(default=None, description="The ID of the Response Action being undone.", alias="actionExecutionIdBeingUndone")
    __properties: ClassVar[List[str]] = ["id", "callerId", "actionType", "executionContext", "parameters", "outputs", "failure", "status", "userId", "createdAt", "updatedAt", "actionExecutionIdBeingUndone"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActionExecution from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each value in parameters (dict)
        _field_dict = {}
        if self.parameters:
            for _key_parameters in self.parameters:
                if self.parameters[_key_parameters]:
                    _field_dict[_key_parameters] = self.parameters[_key_parameters].to_dict()
            _dict['parameters'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in outputs (dict)
        _field_dict = {}
        if self.outputs:
            for _key_outputs in self.outputs:
                if self.outputs[_key_outputs]:
                    _field_dict[_key_outputs] = self.outputs[_key_outputs].to_dict()
            _dict['outputs'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of failure
        if self.failure:
            _dict['failure'] = self.failure.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActionExecution from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "callerId": obj.get("callerId"),
            "actionType": obj.get("actionType"),
            "executionContext": obj.get("executionContext"),
            "parameters": dict(
                (_k, ActionExecutionParameterValue.from_dict(_v))
                for _k, _v in obj["parameters"].items()
            )
            if obj.get("parameters") is not None
            else None,
            "outputs": dict(
                (_k, ActionExecutionParameterValue.from_dict(_v))
                for _k, _v in obj["outputs"].items()
            )
            if obj.get("outputs") is not None
            else None,
            "failure": Failure.from_dict(obj["failure"]) if obj.get("failure") is not None else None,
            "status": obj.get("status"),
            "userId": obj.get("userId"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "actionExecutionIdBeingUndone": obj.get("actionExecutionIdBeingUndone")
        })
        return _obj


