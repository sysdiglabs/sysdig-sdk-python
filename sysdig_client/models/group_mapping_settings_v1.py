# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class GroupMappingSettingsV1(BaseModel):
    """
    The request to save group mapping settings. Currently settings for conflict resolution strategies are supported. 
    """ # noqa: E501
    no_mapping_strategy: StrictStr = Field(description="Strategy for handling no mappings. ", alias="noMappingStrategy")
    different_roles_same_team_strategy: StrictStr = Field(description="Strategy for handling different roles on the same team. ", alias="differentRolesSameTeamStrategy")
    no_mappings_error_redirect_url: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="Redirect URL when NO_MAPPINGS_ERROR_REDIRECT is selected. ", alias="noMappingsErrorRedirectUrl")
    __properties: ClassVar[List[str]] = ["noMappingStrategy", "differentRolesSameTeamStrategy", "noMappingsErrorRedirectUrl"]

    @field_validator('no_mapping_strategy')
    def no_mapping_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UNAUTHORIZED', 'DEFAULT_TEAM_DEFAULT_ROLE', 'NO_MAPPINGS_ERROR_REDIRECT']):
            raise ValueError("must be one of enum values ('UNAUTHORIZED', 'DEFAULT_TEAM_DEFAULT_ROLE', 'NO_MAPPINGS_ERROR_REDIRECT')")
        return value

    @field_validator('different_roles_same_team_strategy')
    def different_roles_same_team_strategy_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['UNAUTHORIZED', 'FIRST_MATCH', 'WEIGHTED']):
            raise ValueError("must be one of enum values ('UNAUTHORIZED', 'FIRST_MATCH', 'WEIGHTED')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GroupMappingSettingsV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if no_mappings_error_redirect_url (nullable) is None
        # and model_fields_set contains the field
        if self.no_mappings_error_redirect_url is None and "no_mappings_error_redirect_url" in self.model_fields_set:
            _dict['noMappingsErrorRedirectUrl'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GroupMappingSettingsV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "noMappingStrategy": obj.get("noMappingStrategy"),
            "differentRolesSameTeamStrategy": obj.get("differentRolesSameTeamStrategy"),
            "noMappingsErrorRedirectUrl": obj.get("noMappingsErrorRedirectUrl")
        })
        return _obj


