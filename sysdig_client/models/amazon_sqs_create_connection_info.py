# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.key_value_object import KeyValueObject
from typing import Optional, Set
from typing_extensions import Self

class AmazonSQSCreateConnectionInfo(BaseModel):
    """
    AmazonSQSCreateConnectionInfo
    """ # noqa: E501
    owner_account: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The AWS account ID of the account that created the queue", alias="ownerAccount")
    region: Annotated[str, Field(strict=True, max_length=16)] = Field(description="Region in which the SQS queue is hosted")
    queue: Annotated[str, Field(strict=True, max_length=16)] = Field(description="Queue name")
    delay: Optional[Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)]] = Field(default=None, description="Delay, in seconds, applied to the data")
    headers: Optional[Annotated[List[KeyValueObject], Field(max_length=256)]] = Field(default=None, description="Extra headers to add to the payload. Each header mapping requires 2 keys: 'key' for the header key and 'value' for its value")
    access_key: Annotated[str, Field(strict=True, max_length=32)] = Field(description="Access Key for authenticating on AWS to send data on the queue", alias="accessKey")
    access_secret: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Access Secret for authenticating on AWS to send data on the queue", alias="accessSecret")
    __properties: ClassVar[List[str]] = ["ownerAccount", "region", "queue", "delay", "headers", "accessKey", "accessSecret"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AmazonSQSCreateConnectionInfo from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in headers (list)
        _items = []
        if self.headers:
            for _item_headers in self.headers:
                if _item_headers:
                    _items.append(_item_headers.to_dict())
            _dict['headers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AmazonSQSCreateConnectionInfo from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ownerAccount": obj.get("ownerAccount"),
            "region": obj.get("region"),
            "queue": obj.get("queue"),
            "delay": obj.get("delay"),
            "headers": [KeyValueObject.from_dict(_item) for _item in obj["headers"]] if obj.get("headers") is not None else None,
            "accessKey": obj.get("accessKey"),
            "accessSecret": obj.get("accessSecret")
        })
        return _obj


