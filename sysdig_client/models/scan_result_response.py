# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from sysdig_client.models.base_image import BaseImage
from sysdig_client.models.layer import Layer
from sysdig_client.models.package import Package
from sysdig_client.models.policies import Policies
from sysdig_client.models.producer import Producer
from sysdig_client.models.risk_acceptance_definition import RiskAcceptanceDefinition
from sysdig_client.models.scan_result_response_metadata import ScanResultResponseMetadata
from sysdig_client.models.vulnerability import Vulnerability
from typing import Optional, Set
from typing_extensions import Self

class ScanResultResponse(BaseModel):
    """
    ScanResultResponse
    """ # noqa: E501
    asset_type: StrictStr = Field(description="scan result asset type", alias="assetType")
    stage: StrictStr = Field(description="scan result stage")
    metadata: ScanResultResponseMetadata
    packages: Dict[str, Package]
    vulnerabilities: Optional[Dict[str, Vulnerability]] = None
    layers: Optional[Dict[str, Layer]] = None
    base_images: Optional[Dict[str, BaseImage]] = Field(default=None, alias="baseImages")
    policies: Optional[Policies] = None
    risk_accepts: Optional[Dict[str, RiskAcceptanceDefinition]] = Field(default=None, alias="riskAccepts")
    producer: Optional[Producer] = None
    __properties: ClassVar[List[str]] = ["assetType", "stage", "metadata", "packages", "vulnerabilities", "layers", "baseImages", "policies", "riskAccepts", "producer"]

    @field_validator('asset_type')
    def asset_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['containerImage', 'host']):
            raise ValueError("must be one of enum values ('containerImage', 'host')")
        return value

    @field_validator('stage')
    def stage_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pipeline', 'runtime', 'registry']):
            raise ValueError("must be one of enum values ('pipeline', 'runtime', 'registry')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScanResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of metadata
        if self.metadata:
            _dict['metadata'] = self.metadata.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in packages (dict)
        _field_dict = {}
        if self.packages:
            for _key_packages in self.packages:
                if self.packages[_key_packages]:
                    _field_dict[_key_packages] = self.packages[_key_packages].to_dict()
            _dict['packages'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in vulnerabilities (dict)
        _field_dict = {}
        if self.vulnerabilities:
            for _key_vulnerabilities in self.vulnerabilities:
                if self.vulnerabilities[_key_vulnerabilities]:
                    _field_dict[_key_vulnerabilities] = self.vulnerabilities[_key_vulnerabilities].to_dict()
            _dict['vulnerabilities'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in layers (dict)
        _field_dict = {}
        if self.layers:
            for _key_layers in self.layers:
                if self.layers[_key_layers]:
                    _field_dict[_key_layers] = self.layers[_key_layers].to_dict()
            _dict['layers'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of each value in base_images (dict)
        _field_dict = {}
        if self.base_images:
            for _key_base_images in self.base_images:
                if self.base_images[_key_base_images]:
                    _field_dict[_key_base_images] = self.base_images[_key_base_images].to_dict()
            _dict['baseImages'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of policies
        if self.policies:
            _dict['policies'] = self.policies.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each value in risk_accepts (dict)
        _field_dict = {}
        if self.risk_accepts:
            for _key_risk_accepts in self.risk_accepts:
                if self.risk_accepts[_key_risk_accepts]:
                    _field_dict[_key_risk_accepts] = self.risk_accepts[_key_risk_accepts].to_dict()
            _dict['riskAccepts'] = _field_dict
        # override the default output from pydantic by calling `to_dict()` of producer
        if self.producer:
            _dict['producer'] = self.producer.to_dict()
        # set to None if base_images (nullable) is None
        # and model_fields_set contains the field
        if self.base_images is None and "base_images" in self.model_fields_set:
            _dict['baseImages'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScanResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "assetType": obj.get("assetType"),
            "stage": obj.get("stage"),
            "metadata": ScanResultResponseMetadata.from_dict(obj["metadata"]) if obj.get("metadata") is not None else None,
            "packages": dict(
                (_k, Package.from_dict(_v))
                for _k, _v in obj["packages"].items()
            )
            if obj.get("packages") is not None
            else None,
            "vulnerabilities": dict(
                (_k, Vulnerability.from_dict(_v))
                for _k, _v in obj["vulnerabilities"].items()
            )
            if obj.get("vulnerabilities") is not None
            else None,
            "layers": dict(
                (_k, Layer.from_dict(_v))
                for _k, _v in obj["layers"].items()
            )
            if obj.get("layers") is not None
            else None,
            "baseImages": dict(
                (_k, BaseImage.from_dict(_v))
                for _k, _v in obj["baseImages"].items()
            )
            if obj.get("baseImages") is not None
            else None,
            "policies": Policies.from_dict(obj["policies"]) if obj.get("policies") is not None else None,
            "riskAccepts": dict(
                (_k, RiskAcceptanceDefinition.from_dict(_v))
                for _k, _v in obj["riskAccepts"].items()
            )
            if obj.get("riskAccepts") is not None
            else None,
            "producer": Producer.from_dict(obj["producer"]) if obj.get("producer") is not None else None
        })
        return _obj


