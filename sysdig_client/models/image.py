# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List
from typing_extensions import Annotated
from sysdig_client.models.vulnerability_summary import VulnerabilitySummary
from typing import Optional, Set
from typing_extensions import Self

class Image(BaseModel):
    """
    An Image resource that returns as part of of the image summary.
    """ # noqa: E501
    hash: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Resource unique identifier")
    name: Annotated[str, Field(strict=True, max_length=8192)] = Field(description="Resource name")
    type: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The resource type")
    pull_string: Annotated[str, Field(strict=True, max_length=8192)] = Field(description="The pull string for the image.", alias="pullString")
    vulnerability_summary: VulnerabilitySummary = Field(alias="vulnerabilitySummary")
    in_use_vulnerability_summary: VulnerabilitySummary = Field(alias="inUseVulnerabilitySummary")
    vm_api_endpoint: Annotated[str, Field(strict=True, max_length=512)] = Field(description="A link that provides vulnerability management information about an image (Images only).", alias="vmApiEndpoint")
    __properties: ClassVar[List[str]] = ["hash", "name", "type", "pullString", "vulnerabilitySummary", "inUseVulnerabilitySummary", "vmApiEndpoint"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Image from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of vulnerability_summary
        if self.vulnerability_summary:
            _dict['vulnerabilitySummary'] = self.vulnerability_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_use_vulnerability_summary
        if self.in_use_vulnerability_summary:
            _dict['inUseVulnerabilitySummary'] = self.in_use_vulnerability_summary.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Image from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hash": obj.get("hash"),
            "name": obj.get("name"),
            "type": obj.get("type"),
            "pullString": obj.get("pullString"),
            "vulnerabilitySummary": VulnerabilitySummary.from_dict(obj["vulnerabilitySummary"]) if obj.get("vulnerabilitySummary") is not None else None,
            "inUseVulnerabilitySummary": VulnerabilitySummary.from_dict(obj["inUseVulnerabilitySummary"]) if obj.get("inUseVulnerabilitySummary") is not None else None,
            "vmApiEndpoint": obj.get("vmApiEndpoint")
        })
        return _obj


