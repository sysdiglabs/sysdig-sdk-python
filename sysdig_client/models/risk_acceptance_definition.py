# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.context import Context
from typing import Optional, Set
from typing_extensions import Self

class RiskAcceptanceDefinition(BaseModel):
    """
    RiskAcceptanceDefinition
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="id of the risk acceptance")
    entity_type: Annotated[str, Field(strict=True, max_length=255)] = Field(description="entity type for the risk", alias="entityType")
    entity_value: Annotated[str, Field(strict=True, max_length=1024)] = Field(description="entity value relative to the the entity type", alias="entityValue")
    context: Annotated[List[Context], Field(min_length=0, max_length=2147483647)]
    status: StrictStr
    reason: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="risk acceptance reason")
    description: Optional[Annotated[str, Field(strict=True, max_length=1024)]] = Field(default=None, description="risk acceptance description")
    expiration_date: Optional[date] = Field(alias="expirationDate")
    created_at: Annotated[str, Field(strict=True, max_length=100)] = Field(description="datetime of creation", alias="createdAt")
    updated_at: Annotated[str, Field(strict=True, max_length=255)] = Field(description="datetime of last update", alias="updatedAt")
    __properties: ClassVar[List[str]] = ["id", "entityType", "entityValue", "context", "status", "reason", "description", "expirationDate", "createdAt", "updatedAt"]

    @field_validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['active', 'expired']):
            raise ValueError("must be one of enum values ('active', 'expired')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RiskAcceptanceDefinition from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in context (list)
        _items = []
        if self.context:
            for _item_context in self.context:
                if _item_context:
                    _items.append(_item_context.to_dict())
            _dict['context'] = _items
        # set to None if expiration_date (nullable) is None
        # and model_fields_set contains the field
        if self.expiration_date is None and "expiration_date" in self.model_fields_set:
            _dict['expirationDate'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RiskAcceptanceDefinition from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "entityType": obj.get("entityType"),
            "entityValue": obj.get("entityValue"),
            "context": [Context.from_dict(_item) for _item in obj["context"]] if obj.get("context") is not None else None,
            "status": obj.get("status"),
            "reason": obj.get("reason"),
            "description": obj.get("description"),
            "expirationDate": obj.get("expirationDate"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt")
        })
        return _obj


