# coding: utf-8

"""
    Sysdig Secure Vulnerability Management Runtimeview Public API

    This API allows reading runtime vulnerability data.

    The version of the OpenAPI document: 1.0.3
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.policy_evaluation_result import PolicyEvaluationResult
from sysdig_client.models.vuln_total_by_severity import VulnTotalBySeverity
from typing import Optional, Set
from typing_extensions import Self

class RuntimeResult(BaseModel):
    """
    Runtime result
    """ # noqa: E501
    scope: Optional[Dict[str, Any]] = Field(default=None, description="Scope labels that define the asset")
    result_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Identifier of the scan result", alias="resultId")
    resource_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Identifier of the scanned resource: it will be the image ID for container images or the host ID for hosts.", alias="resourceId")
    sbom_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Identifier of the sbom", alias="sbomId")
    main_asset_name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the scanned asset", alias="mainAssetName")
    running_vuln_total_by_severity: Optional[VulnTotalBySeverity] = Field(default=None, alias="runningVulnTotalBySeverity")
    vuln_total_by_severity: Optional[VulnTotalBySeverity] = Field(default=None, alias="vulnTotalBySeverity")
    policy_evaluation_result: Optional[PolicyEvaluationResult] = Field(default=None, alias="policyEvaluationResult")
    is_risk_spotlight_enabled: Optional[StrictBool] = Field(default=None, description="Whether risk spotlight is enabled or not", alias="isRiskSpotlightEnabled")
    __properties: ClassVar[List[str]] = ["scope", "resultId", "resourceId", "sbomId", "mainAssetName", "runningVulnTotalBySeverity", "vulnTotalBySeverity", "policyEvaluationResult", "isRiskSpotlightEnabled"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of RuntimeResult from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of running_vuln_total_by_severity
        if self.running_vuln_total_by_severity:
            _dict['runningVulnTotalBySeverity'] = self.running_vuln_total_by_severity.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vuln_total_by_severity
        if self.vuln_total_by_severity:
            _dict['vulnTotalBySeverity'] = self.vuln_total_by_severity.to_dict()
        # set to None if sbom_id (nullable) is None
        # and model_fields_set contains the field
        if self.sbom_id is None and "sbom_id" in self.model_fields_set:
            _dict['sbomId'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of RuntimeResult from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "scope": obj.get("scope"),
            "resultId": obj.get("resultId"),
            "resourceId": obj.get("resourceId"),
            "sbomId": obj.get("sbomId"),
            "mainAssetName": obj.get("mainAssetName"),
            "runningVulnTotalBySeverity": VulnTotalBySeverity.from_dict(obj["runningVulnTotalBySeverity"]) if obj.get("runningVulnTotalBySeverity") is not None else None,
            "vulnTotalBySeverity": VulnTotalBySeverity.from_dict(obj["vulnTotalBySeverity"]) if obj.get("vulnTotalBySeverity") is not None else None,
            "policyEvaluationResult": obj.get("policyEvaluationResult"),
            "isRiskSpotlightEnabled": obj.get("isRiskSpotlightEnabled")
        })
        return _obj


