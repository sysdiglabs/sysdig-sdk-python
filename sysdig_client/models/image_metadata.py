# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ImageMetadata(BaseModel):
    """
    ImageMetadata
    """ # noqa: E501
    pull_string: Annotated[str, Field(strict=True, max_length=2048)] = Field(description="image pull string", alias="pullString")
    image_id: Annotated[str, Field(strict=True, max_length=255)] = Field(description="image id", alias="imageId")
    digest: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="image digest")
    base_os: Annotated[str, Field(strict=True, max_length=255)] = Field(description="image base os", alias="baseOs")
    size: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="image size in bytes")
    os: Annotated[str, Field(strict=True, max_length=255)] = Field(description="image os")
    architecture: Optional[StrictStr] = Field(default=None, description="image architecture")
    labels: Optional[Dict[str, Any]] = Field(default=None, description="image labels")
    author: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="image author")
    created_at: Annotated[str, Field(strict=True, max_length=100)] = Field(description="datetime of creation", alias="createdAt")
    __properties: ClassVar[List[str]] = ["pullString", "imageId", "digest", "baseOs", "size", "os", "architecture", "labels", "author", "createdAt"]

    @field_validator('architecture')
    def architecture_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['ppc64', '386', 'amd64', 'arm', 'arm64', 'wasm', 'loong64', 'mips', 'mipsle', 'mips64', 'mips64le', 'ppc64le', 'riscv64', 's390x']):
            raise ValueError("must be one of enum values ('ppc64', '386', 'amd64', 'arm', 'arm64', 'wasm', 'loong64', 'mips', 'mipsle', 'mips64', 'mips64le', 'ppc64le', 'riscv64', 's390x')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ImageMetadata from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ImageMetadata from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "pullString": obj.get("pullString"),
            "imageId": obj.get("imageId"),
            "digest": obj.get("digest"),
            "baseOs": obj.get("baseOs"),
            "size": obj.get("size"),
            "os": obj.get("os"),
            "architecture": obj.get("architecture"),
            "labels": obj.get("labels"),
            "author": obj.get("author"),
            "createdAt": obj.get("createdAt")
        })
        return _obj


