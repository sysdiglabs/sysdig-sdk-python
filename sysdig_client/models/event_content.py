# coding: utf-8

"""
    Sysdig Secure Events Feed API

    Sysdig Secure Events Feed API enables you to deep-dive into specific security events.

    The version of the OpenAPI document: 1.2.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sysdig_client.models.agentless_ml_runtime_detection_content import AgentlessMlRuntimeDetectionContent
from sysdig_client.models.agentless_runtime_detection_content import AgentlessRuntimeDetectionContent
from sysdig_client.models.k8s_admission_review_content import K8sAdmissionReviewContent
from sysdig_client.models.stateful_detections_content import StatefulDetectionsContent
from sysdig_client.models.workload_ml_runtime_detection_content import WorkloadMlRuntimeDetectionContent
from sysdig_client.models.workload_runtime_detection_content import WorkloadRuntimeDetectionContent
from sysdig_client.models.event_content_type import EventContentType
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

EVENTCONTENT_ONE_OF_SCHEMAS = ["AgentlessMlRuntimeDetectionContent", "AgentlessRuntimeDetectionContent", "K8sAdmissionReviewContent", "StatefulDetectionsContent", "WorkloadMlRuntimeDetectionContent", "WorkloadRuntimeDetectionContent"]

class  EventContent(BaseModel):
    """
    Event data. It contains fields from the original event and attributes generated at the engine level. 
    """
    # data type: K8sAdmissionReviewContent
    oneof_schema_1_validator: Optional[K8sAdmissionReviewContent] = None
    # data type: AgentlessRuntimeDetectionContent
    oneof_schema_2_validator: Optional[AgentlessRuntimeDetectionContent] = None
    # data type: WorkloadRuntimeDetectionContent
    oneof_schema_3_validator: Optional[WorkloadRuntimeDetectionContent] = None
    # data type: WorkloadMlRuntimeDetectionContent
    oneof_schema_4_validator: Optional[WorkloadMlRuntimeDetectionContent] = None
    # data type: AgentlessMlRuntimeDetectionContent
    oneof_schema_5_validator: Optional[AgentlessMlRuntimeDetectionContent] = None
    # data type: StatefulDetectionsContent
    oneof_schema_6_validator: Optional[StatefulDetectionsContent] = None
    actual_instance: Optional[Union[AgentlessMlRuntimeDetectionContent, AgentlessRuntimeDetectionContent, K8sAdmissionReviewContent, StatefulDetectionsContent, WorkloadMlRuntimeDetectionContent, WorkloadRuntimeDetectionContent]] = None
    one_of_schemas: Set[str] = { "AgentlessMlRuntimeDetectionContent", "AgentlessRuntimeDetectionContent", "K8sAdmissionReviewContent", "StatefulDetectionsContent", "WorkloadMlRuntimeDetectionContent", "WorkloadRuntimeDetectionContent" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = EventContent.model_construct()
        error_messages = []
        match = 0
        # validate data type: K8sAdmissionReviewContent
        if not isinstance(v, K8sAdmissionReviewContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `K8sAdmissionReviewContent`")
        else:
            match += 1
        # validate data type: AgentlessRuntimeDetectionContent
        if not isinstance(v, AgentlessRuntimeDetectionContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentlessRuntimeDetectionContent`")
        else:
            match += 1
        # validate data type: WorkloadRuntimeDetectionContent
        if not isinstance(v, WorkloadRuntimeDetectionContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WorkloadRuntimeDetectionContent`")
        else:
            match += 1
        # validate data type: WorkloadMlRuntimeDetectionContent
        if not isinstance(v, WorkloadMlRuntimeDetectionContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `WorkloadMlRuntimeDetectionContent`")
        else:
            match += 1
        # validate data type: AgentlessMlRuntimeDetectionContent
        if not isinstance(v, AgentlessMlRuntimeDetectionContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `AgentlessMlRuntimeDetectionContent`")
        else:
            match += 1
        # validate data type: StatefulDetectionsContent
        if not isinstance(v, StatefulDetectionsContent):
            error_messages.append(f"Error! Input type `{type(v)}` is not `StatefulDetectionsContent`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in EventContent with oneOf schemas: AgentlessMlRuntimeDetectionContent, AgentlessRuntimeDetectionContent, K8sAdmissionReviewContent, StatefulDetectionsContent, WorkloadMlRuntimeDetectionContent, WorkloadRuntimeDetectionContent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in EventContent with oneOf schemas: AgentlessMlRuntimeDetectionContent, AgentlessRuntimeDetectionContent, K8sAdmissionReviewContent, StatefulDetectionsContent, WorkloadMlRuntimeDetectionContent, WorkloadRuntimeDetectionContent. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0
        raw_event_content = json.loads(json_str)

        # deserialize data into K8sAdmissionReviewContent
        try:
            if raw_event_content.get("type") == EventContentType.K8SADMISSIONREVIEW:
                instance.actual_instance = K8sAdmissionReviewContent.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentlessRuntimeDetectionContent
        try:
            if raw_event_content.get("type") == EventContentType.AGENTLESSRUNTIMEDETECTION:
                instance.actual_instance = AgentlessRuntimeDetectionContent.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WorkloadRuntimeDetectionContent
        try:
            if raw_event_content.get("type") == EventContentType.WORKLOADRUNTIMEDETECTION:
                instance.actual_instance = WorkloadRuntimeDetectionContent.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into WorkloadMlRuntimeDetectionContent
        try:
            if raw_event_content.get("type") == EventContentType.WORKLOADMLRUNTIMEDETECTION:
                instance.actual_instance = WorkloadMlRuntimeDetectionContent.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into AgentlessMlRuntimeDetectionContent
        try:
            if raw_event_content.get("type") == EventContentType.AGENTLESSMLRUNTIMEDETECTION:
                instance.actual_instance = AgentlessMlRuntimeDetectionContent.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into StatefulDetectionsContent
        try:
            if raw_event_content.get("type") == EventContentType.STATEFULDETECTIONS:
                instance.actual_instance = StatefulDetectionsContent.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into EventContent with oneOf schemas: AgentlessMlRuntimeDetectionContent, AgentlessRuntimeDetectionContent, K8sAdmissionReviewContent, StatefulDetectionsContent, WorkloadMlRuntimeDetectionContent, WorkloadRuntimeDetectionContent. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into EventContent with oneOf schemas: AgentlessMlRuntimeDetectionContent, AgentlessRuntimeDetectionContent, K8sAdmissionReviewContent, StatefulDetectionsContent, WorkloadMlRuntimeDetectionContent, WorkloadRuntimeDetectionContent. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], AgentlessMlRuntimeDetectionContent, AgentlessRuntimeDetectionContent, K8sAdmissionReviewContent, StatefulDetectionsContent, WorkloadMlRuntimeDetectionContent, WorkloadRuntimeDetectionContent]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


