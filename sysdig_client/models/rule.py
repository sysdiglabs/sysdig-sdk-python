# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.predicate import Predicate
from sysdig_client.models.rule_failures_inner import RuleFailuresInner
from typing import Optional, Set
from typing_extensions import Self

class Rule(BaseModel):
    """
    Rule
    """ # noqa: E501
    rule_id: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="rule's id", alias="ruleId")
    rule_type: Annotated[str, Field(strict=True, max_length=255)] = Field(description="rule type", alias="ruleType")
    evaluation_result: Optional[StrictStr] = Field(default=None, description="result of rule evaluation", alias="evaluationResult")
    predicates: Optional[Annotated[List[Predicate], Field(min_length=0, max_length=2147483647)]] = Field(default=None, description="list of rule's predicates")
    failure_type: StrictStr = Field(description="rule failure type", alias="failureType")
    description: Annotated[str, Field(strict=True, max_length=255)] = Field(description="rule description")
    failures: Optional[Annotated[List[RuleFailuresInner], Field(min_length=0, max_length=2147483647)]] = Field(default=None, description="list of rule failures")
    __properties: ClassVar[List[str]] = ["ruleId", "ruleType", "evaluationResult", "predicates", "failureType", "description", "failures"]

    @field_validator('evaluation_result')
    def evaluation_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'notApplicable', 'accepted']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'notApplicable', 'accepted')")
        return value

    @field_validator('failure_type')
    def failure_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['pkgVulnFailure', 'imageConfigFailure']):
            raise ValueError("must be one of enum values ('pkgVulnFailure', 'imageConfigFailure')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Rule from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in predicates (list)
        _items = []
        if self.predicates:
            for _item_predicates in self.predicates:
                if _item_predicates:
                    _items.append(_item_predicates.to_dict())
            _dict['predicates'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in failures (list)
        _items = []
        if self.failures:
            for _item_failures in self.failures:
                if _item_failures:
                    _items.append(_item_failures.to_dict())
            _dict['failures'] = _items
        # set to None if predicates (nullable) is None
        # and model_fields_set contains the field
        if self.predicates is None and "predicates" in self.model_fields_set:
            _dict['predicates'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Rule from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "ruleId": obj.get("ruleId"),
            "ruleType": obj.get("ruleType"),
            "evaluationResult": obj.get("evaluationResult"),
            "predicates": [Predicate.from_dict(_item) for _item in obj["predicates"]] if obj.get("predicates") is not None else None,
            "failureType": obj.get("failureType"),
            "description": obj.get("description"),
            "failures": [RuleFailuresInner.from_dict(_item) for _item in obj["failures"]] if obj.get("failures") is not None else None
        })
        return _obj


