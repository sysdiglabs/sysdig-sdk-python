# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.key_value_object import KeyValueObject
from typing import Optional, Set
from typing_extensions import Self

class GooglePubSubCreateConnectionInfo1(BaseModel):
    """
    GooglePubSubCreateConnectionInfo1
    """ # noqa: E501
    project: Annotated[str, Field(strict=True, max_length=16)] = Field(description="GCP project ID hosting the target pub/sub")
    topic: Annotated[str, Field(strict=True, max_length=16)] = Field(description="pub/sub topic onto which publish the data")
    ordering_key: Optional[Annotated[str, Field(strict=True, max_length=16)]] = Field(default=None, description="The key to use to order the messages. Required to enable ordered delivery", alias="orderingKey")
    attributes: Optional[Annotated[List[KeyValueObject], Field(max_length=128)]] = Field(default=None, description="Extra headers to add to the request. Each header mapping requires 2 keys: \"key\" for the header key and \"value\" for its value")
    credentials_json: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="JSON credentials for the service account Sysdig will use to send data", alias="credentialsJson")
    __properties: ClassVar[List[str]] = ["project", "topic", "orderingKey", "attributes", "credentialsJson"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GooglePubSubCreateConnectionInfo1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in attributes (list)
        _items = []
        if self.attributes:
            for _item_attributes in self.attributes:
                if _item_attributes:
                    _items.append(_item_attributes.to_dict())
            _dict['attributes'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GooglePubSubCreateConnectionInfo1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "project": obj.get("project"),
            "topic": obj.get("topic"),
            "orderingKey": obj.get("orderingKey"),
            "attributes": [KeyValueObject.from_dict(_item) for _item in obj["attributes"]] if obj.get("attributes") is not None else None,
            "credentialsJson": obj.get("credentialsJson")
        })
        return _obj


