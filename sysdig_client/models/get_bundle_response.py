# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.bundle_rule import BundleRule
from typing import Optional, Set
from typing_extensions import Self

class GetBundleResponse(BaseModel):
    """
    Bundle definition
    """ # noqa: E501
    id: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="The Bundle ID")
    name: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="The human readable Bundle name")
    identifier: Annotated[str, Field(min_length=1, strict=True, max_length=1024)] = Field(description="The Policy identifier generated from the name")
    description: Optional[Annotated[str, Field(min_length=0, strict=True, max_length=4096)]] = Field(default=None, description="The Bundle description")
    bundle_type: StrictStr = Field(description="Specifies whether the Bundle was defined by the Customer or by Sysdig", alias="bundleType")
    rules: Annotated[List[BundleRule], Field(min_length=1, max_length=1024)] = Field(description="The Rules defining this Bundle")
    __properties: ClassVar[List[str]] = ["id", "name", "identifier", "description", "bundleType", "rules"]

    @field_validator('bundle_type')
    def bundle_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['predefined', 'custom']):
            raise ValueError("must be one of enum values ('predefined', 'custom')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of GetBundleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in rules (list)
        _items = []
        if self.rules:
            for _item_rules in self.rules:
                if _item_rules:
                    _items.append(_item_rules.to_dict())
            _dict['rules'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of GetBundleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "identifier": obj.get("identifier"),
            "description": obj.get("description"),
            "bundleType": obj.get("bundleType"),
            "rules": [BundleRule.from_dict(_item) for _item in obj["rules"]] if obj.get("rules") is not None else None
        })
        return _obj


