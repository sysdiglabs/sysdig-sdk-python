# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.policy_evaluation import PolicyEvaluation
from typing import Optional, Set
from typing_extensions import Self

class Policies(BaseModel):
    """
    Policies
    """ # noqa: E501
    global_evaluation: Optional[StrictStr] = Field(default=None, alias="globalEvaluation")
    evaluations: Optional[Annotated[List[PolicyEvaluation], Field(min_length=0, max_length=2048)]] = None
    __properties: ClassVar[List[str]] = ["globalEvaluation", "evaluations"]

    @field_validator('global_evaluation')
    def global_evaluation_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['passed', 'failed', 'accepted', 'noPolicy']):
            raise ValueError("must be one of enum values ('passed', 'failed', 'accepted', 'noPolicy')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Policies from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in evaluations (list)
        _items = []
        if self.evaluations:
            for _item_evaluations in self.evaluations:
                if _item_evaluations:
                    _items.append(_item_evaluations.to_dict())
            _dict['evaluations'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Policies from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "globalEvaluation": obj.get("globalEvaluation"),
            "evaluations": [PolicyEvaluation.from_dict(_item) for _item in obj["evaluations"]] if obj.get("evaluations") is not None else None
        })
        return _obj


