# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.issue_type_response_v1 import IssueTypeResponseV1
from typing import Optional, Set
from typing_extensions import Self

class IntegrationResponseV1(BaseModel):
    """
    IntegrationResponseV1
    """ # noqa: E501
    id: Annotated[int, Field(strict=True, ge=0)] = Field(description="Integration id.")
    name: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Integration name.")
    created_at: datetime = Field(description="Integration creation date.", alias="createdAt")
    modified_at: datetime = Field(description="Integration modification date.", alias="modifiedAt")
    deleted_at: Optional[datetime] = Field(default=None, description="Integration deletion date.", alias="deletedAt")
    customer_id: Annotated[int, Field(strict=True, ge=0)] = Field(description="Customer identifier for which the integration was created.", alias="customerId")
    is_enabled: StrictBool = Field(description="Integration enabled status.", alias="isEnabled")
    is_valid: StrictBool = Field(description="Integration valid status.", alias="isValid")
    is_all_teams: StrictBool = Field(description="**True** if the integration is enabled for all teams, **false** otherwise and the *teamIds* for which is accessible will be defined. ", alias="isAllTeams")
    team_ids: Optional[Annotated[List[Annotated[int, Field(strict=True, ge=0)]], Field(max_length=500)]] = Field(default=None, description="The list of internal Sysdig team ids that the integration is enabled for.", alias="teamIds")
    jira_project_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira project id.", alias="jiraProjectId")
    jira_project_name: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Jira project name.", alias="jiraProjectName")
    jira_url: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Customer's Jira URL.", alias="jiraUrl")
    jira_email: Annotated[str, Field(strict=True, max_length=512)] = Field(description="User's Jira email.", alias="jiraEmail")
    jira_assignee: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="The default assignee account id for this integration.", alias="jiraAssignee")
    jira_labels: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=512)]], Field(max_length=500)]] = Field(default=None, description="The list of labels available for this integration.", alias="jiraLabels")
    parent_issue_type: Optional[IssueTypeResponseV1] = Field(default=None, description="Parent issue type for the integration.", alias="parentIssueType")
    child_issue_type: Optional[IssueTypeResponseV1] = Field(default=None, description="Child issue type for the integration.", alias="childIssueType")
    __properties: ClassVar[List[str]] = ["id", "name", "createdAt", "modifiedAt", "deletedAt", "customerId", "isEnabled", "isValid", "isAllTeams", "teamIds", "jiraProjectId", "jiraProjectName", "jiraUrl", "jiraEmail", "jiraAssignee", "jiraLabels", "parentIssueType", "childIssueType"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IntegrationResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of parent_issue_type
        if self.parent_issue_type:
            _dict['parentIssueType'] = self.parent_issue_type.to_dict()
        # override the default output from pydantic by calling `to_dict()` of child_issue_type
        if self.child_issue_type:
            _dict['childIssueType'] = self.child_issue_type.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IntegrationResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "createdAt": obj.get("createdAt"),
            "modifiedAt": obj.get("modifiedAt"),
            "deletedAt": obj.get("deletedAt"),
            "customerId": obj.get("customerId"),
            "isEnabled": obj.get("isEnabled"),
            "isValid": obj.get("isValid"),
            "isAllTeams": obj.get("isAllTeams"),
            "teamIds": obj.get("teamIds"),
            "jiraProjectId": obj.get("jiraProjectId"),
            "jiraProjectName": obj.get("jiraProjectName"),
            "jiraUrl": obj.get("jiraUrl"),
            "jiraEmail": obj.get("jiraEmail"),
            "jiraAssignee": obj.get("jiraAssignee"),
            "jiraLabels": obj.get("jiraLabels"),
            "parentIssueType": IssueTypeResponseV1.from_dict(obj["parentIssueType"]) if obj.get("parentIssueType") is not None else None,
            "childIssueType": IssueTypeResponseV1.from_dict(obj["childIssueType"]) if obj.get("childIssueType") is not None else None
        })
        return _obj


