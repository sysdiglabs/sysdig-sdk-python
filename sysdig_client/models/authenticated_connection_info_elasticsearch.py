# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class AuthenticatedConnectionInfoElasticsearch(BaseModel):
    """
    AuthenticatedConnectionInfoElasticsearch
    """ # noqa: E501
    endpoint: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Elasticsearch instance endpoint URL")
    index: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Name of the index to store the data in")
    is_insecure: Optional[StrictBool] = Field(default=False, description="Don't verify TLS certificate", alias="isInsecure")
    auth: StrictStr = Field(description="Authentication method")
    format: Optional[StrictStr] = Field(default=None, description="If specified, transforms `content.fields` and `labels` * `KV_PAIRS` - from objects (i.e. `{\"foo\": \"bar\", ...}`) to arrays of objects with \"key\" and \"value\" properties {i.e. `[{\"key\" : \"foo\", \"value\": \"bar\"}, ...]`) ")
    secret: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Authentication secret. To be set if auth is specified")
    __properties: ClassVar[List[str]] = ["endpoint", "index", "isInsecure", "auth", "format", "secret"]

    @field_validator('auth')
    def auth_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['BASIC_AUTH', 'BEARER_TOKEN']):
            raise ValueError("must be one of enum values ('BASIC_AUTH', 'BEARER_TOKEN')")
        return value

    @field_validator('format')
    def format_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['KV_PAIRS']):
            raise ValueError("must be one of enum values ('KV_PAIRS')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of AuthenticatedConnectionInfoElasticsearch from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of AuthenticatedConnectionInfoElasticsearch from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "endpoint": obj.get("endpoint"),
            "index": obj.get("index"),
            "isInsecure": obj.get("isInsecure") if obj.get("isInsecure") is not None else False,
            "auth": obj.get("auth"),
            "format": obj.get("format"),
            "secret": obj.get("secret")
        })
        return _obj


