# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.promql_matcher import PromqlMatcher
from sysdig_client.models.workload_cost_trends_data_response_current_range import WorkloadCostTrendsDataResponseCurrentRange
from sysdig_client.models.workload_cost_trends_data_response_group_by_data_inner import WorkloadCostTrendsDataResponseGroupByDataInner
from sysdig_client.models.workload_cost_trends_data_response_previous_range import WorkloadCostTrendsDataResponsePreviousRange
from sysdig_client.models.workload_cost_trends_data_response_total import WorkloadCostTrendsDataResponseTotal
from typing import Optional, Set
from typing_extensions import Self

class WorkloadCostTrendsDataResponse(BaseModel):
    """
    Cost trends observed between two consecutive time periods in the past.
    """ # noqa: E501
    current_range: Optional[WorkloadCostTrendsDataResponseCurrentRange] = Field(default=None, alias="currentRange")
    previous_range: Optional[WorkloadCostTrendsDataResponsePreviousRange] = Field(default=None, alias="previousRange")
    total: Optional[WorkloadCostTrendsDataResponseTotal] = None
    scope: Optional[Annotated[List[PromqlMatcher], Field(max_length=512)]] = Field(default=None, description="A list of PromQL-style filters.")
    group_by: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]], Field(max_length=10)]] = Field(default=None, description="The label keys used to group the returned cost data.", alias="groupBy")
    group_by_data: Optional[Annotated[List[WorkloadCostTrendsDataResponseGroupByDataInner], Field(max_length=10000)]] = Field(default=None, description="Grouped cost data for each combination of label values.", alias="groupByData")
    __properties: ClassVar[List[str]] = ["currentRange", "previousRange", "total", "scope", "groupBy", "groupByData"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of WorkloadCostTrendsDataResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_range
        if self.current_range:
            _dict['currentRange'] = self.current_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of previous_range
        if self.previous_range:
            _dict['previousRange'] = self.previous_range.to_dict()
        # override the default output from pydantic by calling `to_dict()` of total
        if self.total:
            _dict['total'] = self.total.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scope (list)
        _items = []
        if self.scope:
            for _item_scope in self.scope:
                if _item_scope:
                    _items.append(_item_scope.to_dict())
            _dict['scope'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in group_by_data (list)
        _items = []
        if self.group_by_data:
            for _item_group_by_data in self.group_by_data:
                if _item_group_by_data:
                    _items.append(_item_group_by_data.to_dict())
            _dict['groupByData'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of WorkloadCostTrendsDataResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "currentRange": WorkloadCostTrendsDataResponseCurrentRange.from_dict(obj["currentRange"]) if obj.get("currentRange") is not None else None,
            "previousRange": WorkloadCostTrendsDataResponsePreviousRange.from_dict(obj["previousRange"]) if obj.get("previousRange") is not None else None,
            "total": WorkloadCostTrendsDataResponseTotal.from_dict(obj["total"]) if obj.get("total") is not None else None,
            "scope": [PromqlMatcher.from_dict(_item) for _item in obj["scope"]] if obj.get("scope") is not None else None,
            "groupBy": obj.get("groupBy"),
            "groupByData": [WorkloadCostTrendsDataResponseGroupByDataInner.from_dict(_item) for _item in obj["groupByData"]] if obj.get("groupByData") is not None else None
        })
        return _obj


