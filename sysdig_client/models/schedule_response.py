# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.notification_channel import NotificationChannel
from typing import Optional, Set
from typing_extensions import Self

class ScheduleResponse(BaseModel):
    """
    Schema for a scheduled report
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Unique identifier for the schedule")
    user_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the user who created the schedule", alias="userId")
    team_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the team associated with the schedule", alias="teamId")
    customer_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the customer associated with the schedule", alias="customerId")
    name: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Name of the schedule")
    description: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="Description of the schedule")
    report_id: Annotated[int, Field(le=2147483647, strict=True, ge=0)] = Field(description="ID of the report", alias="reportId")
    report_name: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Name of the report", alias="reportName")
    is_report_template: StrictBool = Field(description="Indicates if the report is a template", alias="isReportTemplate")
    report_format: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Format of the report", alias="reportFormat")
    zones: Annotated[List[Annotated[int, Field(le=2147483647, strict=True, ge=0)]], Field(max_length=100)] = Field(description="List of zone IDs")
    policies: Optional[Annotated[List[Annotated[int, Field(le=2147483647, strict=True, ge=0)]], Field(max_length=100)]] = Field(default=None, description="List of policy IDs")
    timezone: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Timezone for the schedule")
    schedule: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Cron expression for the schedule")
    enabled: StrictBool = Field(description="Indicates if the schedule is enabled")
    notification_channels: Optional[Annotated[List[NotificationChannel], Field(max_length=100)]] = Field(default=None, description="List of notification channels", alias="notificationChannels")
    iac_task_id: Optional[Annotated[int, Field(le=2147483647, strict=True, ge=0)]] = Field(default=None, description="ID of the IaC task", alias="iacTaskId")
    password_enabled: Optional[StrictBool] = Field(default=None, description="Indicates if password protection is enabled", alias="passwordEnabled")
    compression: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Compression format")
    created_by: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Email of the user who created the schedule", alias="createdBy")
    updated_by: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="Email of the user who last updated the schedule", alias="updatedBy")
    created_on: datetime = Field(description="Timestamp when the schedule was created", alias="createdOn")
    modified_on: Optional[datetime] = Field(default=None, description="Timestamp when the schedule was last modified", alias="modifiedOn")
    last_scheduled_on: Optional[datetime] = Field(default=None, description="Timestamp when the schedule was last run", alias="lastScheduledOn")
    last_started_on: Optional[datetime] = Field(default=None, description="Timestamp when the schedule was last started", alias="lastStartedOn")
    last_completed_on: Optional[datetime] = Field(default=None, description="Timestamp when the schedule was last completed", alias="lastCompletedOn")
    __properties: ClassVar[List[str]] = ["id", "userId", "teamId", "customerId", "name", "description", "reportId", "reportName", "isReportTemplate", "reportFormat", "zones", "policies", "timezone", "schedule", "enabled", "notificationChannels", "iacTaskId", "passwordEnabled", "compression", "createdBy", "updatedBy", "createdOn", "modifiedOn", "lastScheduledOn", "lastStartedOn", "lastCompletedOn"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ScheduleResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in notification_channels (list)
        _items = []
        if self.notification_channels:
            for _item_notification_channels in self.notification_channels:
                if _item_notification_channels:
                    _items.append(_item_notification_channels.to_dict())
            _dict['notificationChannels'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ScheduleResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "userId": obj.get("userId"),
            "teamId": obj.get("teamId"),
            "customerId": obj.get("customerId"),
            "name": obj.get("name"),
            "description": obj.get("description"),
            "reportId": obj.get("reportId"),
            "reportName": obj.get("reportName"),
            "isReportTemplate": obj.get("isReportTemplate"),
            "reportFormat": obj.get("reportFormat"),
            "zones": obj.get("zones"),
            "policies": obj.get("policies"),
            "timezone": obj.get("timezone"),
            "schedule": obj.get("schedule"),
            "enabled": obj.get("enabled"),
            "notificationChannels": [NotificationChannel.from_dict(_item) for _item in obj["notificationChannels"]] if obj.get("notificationChannels") is not None else None,
            "iacTaskId": obj.get("iacTaskId"),
            "passwordEnabled": obj.get("passwordEnabled"),
            "compression": obj.get("compression"),
            "createdBy": obj.get("createdBy"),
            "updatedBy": obj.get("updatedBy"),
            "createdOn": obj.get("createdOn"),
            "modifiedOn": obj.get("modifiedOn"),
            "lastScheduledOn": obj.get("lastScheduledOn"),
            "lastStartedOn": obj.get("lastStartedOn"),
            "lastCompletedOn": obj.get("lastCompletedOn")
        })
        return _obj


