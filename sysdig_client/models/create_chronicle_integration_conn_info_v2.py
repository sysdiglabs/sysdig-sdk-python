# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class CreateChronicleIntegrationConnInfoV2(BaseModel):
    """
    Create Chronicle Integration Connection V2 Info
    """ # noqa: E501
    region: Optional[StrictStr] = Field(default='us', description="The target region")
    chronicle_customer_id: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Unique identifier (UUID) corresponding to a particular Chronicle instance", alias="chronicleCustomerId")
    namespace: Annotated[str, Field(strict=True, max_length=128)] = Field(description="User-configured environment namespace to identify the data domain the logs originated from")
    credentials_o_auth2: Annotated[str, Field(strict=True, max_length=1048576)] = Field(description="The Chronicle v2 OAuth2 credentials", alias="credentialsOAuth2")
    __properties: ClassVar[List[str]] = ["region", "chronicleCustomerId", "namespace", "credentialsOAuth2"]

    @field_validator('region')
    def region_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(['us', 'europe', 'europe-west2', 'europe-west3', 'europe-west6', 'asia-southeast1', 'asia-south1', 'asia-northeast1', 'me-west1', 'me-central2', 'australia-southeast1']):
            raise ValueError("must be one of enum values ('us', 'europe', 'europe-west2', 'europe-west3', 'europe-west6', 'asia-southeast1', 'asia-south1', 'asia-northeast1', 'me-west1', 'me-central2', 'australia-southeast1')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateChronicleIntegrationConnInfoV2 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateChronicleIntegrationConnInfoV2 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "region": obj.get("region") if obj.get("region") is not None else 'us',
            "chronicleCustomerId": obj.get("chronicleCustomerId"),
            "namespace": obj.get("namespace"),
            "credentialsOAuth2": obj.get("credentialsOAuth2")
        })
        return _obj


