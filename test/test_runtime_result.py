# coding: utf-8

"""
    Sysdig Secure Vulnerability Management Runtimeview Public API

    This API allows reading runtime vulnerability data.

    The version of the OpenAPI document: 1.0.3
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from sysdig_client.models.runtime_result import RuntimeResult

class TestRuntimeResult(unittest.TestCase):
    """RuntimeResult unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> RuntimeResult:
        """Test RuntimeResult
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `RuntimeResult`
        """
        model = RuntimeResult()
        if include_optional:
            return RuntimeResult(
                scope = {"asset.type":"workload","kubernetes.cluster.name":"prod-cluster-00","kubernetes.namespace.name":"foo","kubernetes.workload.name":"bar","kubernetes.workload.type":"deployment"},
                result_id = 'scan-1234',
                resource_id = 'sha256:a1b2c3d4e5f6g7h8i9j0k1l2m3n4o5p6q7r8s9t0u1v2w3x4y5z6',
                sbom_id = 'sbom-1234',
                main_asset_name = 'nginx:latest',
                running_vuln_total_by_severity = sysdig_client.models.vuln_total_by_severity.VulnTotalBySeverity(
                    critical = 12345, 
                    high = 12345, 
                    medium = 12345, 
                    low = 12345, 
                    negligible = 12345, ),
                vuln_total_by_severity = sysdig_client.models.vuln_total_by_severity.VulnTotalBySeverity(
                    critical = 12345, 
                    high = 12345, 
                    medium = 12345, 
                    low = 12345, 
                    negligible = 12345, ),
                policy_evaluation_result = 'passed',
                is_risk_spotlight_enabled = True
            )
        else:
            return RuntimeResult(
        )
        """

    def testRuntimeResult(self):
        """Test RuntimeResult"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
