# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.container_info import ContainerInfo
from sysdig_client.models.inventory_zone import InventoryZone
from sysdig_client.models.posture_policy_summary import PosturePolicySummary
from sysdig_client.models.vulnerability_summary import VulnerabilitySummary
from typing import Optional, Set
from typing_extensions import Self

class InventoryResource(BaseModel):
    """
    An Inventory Resource
    """ # noqa: E501
    hash: Annotated[str, Field(strict=True, max_length=128)] = Field(description="Resource unique identifier")
    name: Annotated[str, Field(strict=True, max_length=8192)] = Field(description="Resource name")
    platform: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The resource platform (such as AWS, GCP, Kubernetes, or Azure)")
    type: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The resource type")
    category: Annotated[str, Field(strict=True, max_length=256)] = Field(description="The resource category")
    last_seen: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Last scan date as unix timestamp", alias="lastSeen")
    is_exposed: Optional[StrictBool] = Field(default=None, description="Indicates if a resource is exposed to the internet", alias="isExposed")
    validated_exposure: Optional[StrictBool] = Field(default=None, description="Indicates if a resource which is exposed to the internet could be reach by our network exposure validator", alias="validatedExposure")
    labels: Annotated[Optional[List[Annotated[str, Field(strict=True, max_length=8192)]]], Field(max_length=10000)] = Field(description="The resource labels")
    metadata: Dict[str, Any] = Field(description="The resource metadata")
    resource_origin: Annotated[str, Field(strict=True, max_length=256)] = Field(description="Where a resource was collected (Code, Deployed)", alias="resourceOrigin")
    posture_policy_summary: Optional[PosturePolicySummary] = Field(default=None, alias="posturePolicySummary")
    vulnerability_summary: Optional[VulnerabilitySummary] = Field(default=None, alias="vulnerabilitySummary")
    in_use_vulnerability_summary: Optional[VulnerabilitySummary] = Field(default=None, alias="inUseVulnerabilitySummary")
    zones: Annotated[List[InventoryZone], Field(max_length=10000)] = Field(description="Resource zones")
    config_api_endpoint: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="A link that provides the resource configuration.", alias="configApiEndpoint")
    posture_control_summary_api_endpoint: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="A link that provides the posture control summary.", alias="postureControlSummaryApiEndpoint")
    vm_api_endpoint: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="A link that provides vulnerability management information about an image (Images only).", alias="vmApiEndpoint")
    container_info: Optional[Annotated[List[ContainerInfo], Field(max_length=10000)]] = Field(default=None, description="List of containers (with some of kubernetes metadata) belonging to this kubernetes workload. If resource is not kubernetes workload this fild will be empty.", alias="containerInfo")
    __properties: ClassVar[List[str]] = ["hash", "name", "platform", "type", "category", "lastSeen", "isExposed", "validatedExposure", "labels", "metadata", "resourceOrigin", "posturePolicySummary", "vulnerabilitySummary", "inUseVulnerabilitySummary", "zones", "configApiEndpoint", "postureControlSummaryApiEndpoint", "vmApiEndpoint", "containerInfo"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of InventoryResource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of posture_policy_summary
        if self.posture_policy_summary:
            _dict['posturePolicySummary'] = self.posture_policy_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of vulnerability_summary
        if self.vulnerability_summary:
            _dict['vulnerabilitySummary'] = self.vulnerability_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of in_use_vulnerability_summary
        if self.in_use_vulnerability_summary:
            _dict['inUseVulnerabilitySummary'] = self.in_use_vulnerability_summary.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in zones (list)
        _items = []
        if self.zones:
            for _item_zones in self.zones:
                if _item_zones:
                    _items.append(_item_zones.to_dict())
            _dict['zones'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in container_info (list)
        _items = []
        if self.container_info:
            for _item_container_info in self.container_info:
                if _item_container_info:
                    _items.append(_item_container_info.to_dict())
            _dict['containerInfo'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of InventoryResource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "hash": obj.get("hash"),
            "name": obj.get("name"),
            "platform": obj.get("platform"),
            "type": obj.get("type"),
            "category": obj.get("category"),
            "lastSeen": obj.get("lastSeen"),
            "isExposed": obj.get("isExposed"),
            "validatedExposure": obj.get("validatedExposure"),
            "labels": obj.get("labels"),
            "metadata": obj.get("metadata"),
            "resourceOrigin": obj.get("resourceOrigin"),
            "posturePolicySummary": PosturePolicySummary.from_dict(obj["posturePolicySummary"]) if obj.get("posturePolicySummary") is not None else None,
            "vulnerabilitySummary": VulnerabilitySummary.from_dict(obj["vulnerabilitySummary"]) if obj.get("vulnerabilitySummary") is not None else None,
            "inUseVulnerabilitySummary": VulnerabilitySummary.from_dict(obj["inUseVulnerabilitySummary"]) if obj.get("inUseVulnerabilitySummary") is not None else None,
            "zones": [InventoryZone.from_dict(_item) for _item in obj["zones"]] if obj.get("zones") is not None else None,
            "configApiEndpoint": obj.get("configApiEndpoint"),
            "postureControlSummaryApiEndpoint": obj.get("postureControlSummaryApiEndpoint"),
            "vmApiEndpoint": obj.get("vmApiEndpoint"),
            "containerInfo": [ContainerInfo.from_dict(_item) for _item in obj["containerInfo"]] if obj.get("containerInfo") is not None else None
        })
        return _obj


