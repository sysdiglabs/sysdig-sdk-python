# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class Connection(BaseModel):
    """
    Represents a connection.
    """ # noqa: E501
    id: Annotated[str, Field(strict=True, max_length=32)] = Field(description="The audit event id.")
    timestamp: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Timestamp the audit event occured, expressed in nanoseconds.")
    type: StrictStr = Field(description="The entry type")
    cmdline: Annotated[str, Field(strict=True, max_length=4096)] = Field(description="Full command line")
    comm: Annotated[str, Field(strict=True, max_length=20)] = Field(description="The name of the command.")
    dns_domains: Annotated[List[Annotated[str, Field(strict=True, max_length=512)]], Field(min_length=0, max_length=1000)] = Field(description="DNS information for the connection event.", alias="dnsDomains")
    container_id: Annotated[str, Field(strict=True, max_length=200)] = Field(description="The container id. `containerId` is present only if the audit event was collected in a container context. ", alias="containerId")
    pid: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="Id of the process owning the connection.")
    process_name: Annotated[str, Field(strict=True, max_length=200)] = Field(description="Name of the process owning the connection.", alias="processName")
    client_ipv4: Annotated[str, Field(strict=True, max_length=15)] = Field(description="The IPv4 dotted notation of the client address.", alias="clientIpv4")
    client_port: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="The client port.", alias="clientPort")
    server_ipv4: Annotated[str, Field(strict=True, max_length=15)] = Field(description="The IPv4 dotted notation of the server address.", alias="serverIpv4")
    server_port: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="The server port.", alias="serverPort")
    direction: StrictStr = Field(description="The direction of the connection.")
    l4protocol: Annotated[str, Field(strict=True, max_length=10)] = Field(description="The layer 4 protocol.")
    hostname: Annotated[str, Field(strict=True, max_length=200)] = Field(description="The Kubernetes hostname.")
    tty: Annotated[int, Field(le=9223372036854775616, strict=True, ge=0)] = Field(description="TTY number.")
    labels: Optional[Dict[str, Annotated[str, Field(strict=True, max_length=200)]]] = Field(default=None, description="Key value pairs of labels.")
    __properties: ClassVar[List[str]] = ["id", "timestamp", "type", "cmdline", "comm", "dnsDomains", "containerId", "pid", "processName", "clientIpv4", "clientPort", "serverIpv4", "serverPort", "direction", "l4protocol", "hostname", "tty", "labels"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['connection']):
            raise ValueError("must be one of enum values ('connection')")
        return value

    @field_validator('direction')
    def direction_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['in', 'out']):
            raise ValueError("must be one of enum values ('in', 'out')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Connection from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Connection from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "timestamp": obj.get("timestamp"),
            "type": obj.get("type"),
            "cmdline": obj.get("cmdline"),
            "comm": obj.get("comm"),
            "dnsDomains": obj.get("dnsDomains"),
            "containerId": obj.get("containerId"),
            "pid": obj.get("pid"),
            "processName": obj.get("processName"),
            "clientIpv4": obj.get("clientIpv4"),
            "clientPort": obj.get("clientPort"),
            "serverIpv4": obj.get("serverIpv4"),
            "serverPort": obj.get("serverPort"),
            "direction": obj.get("direction"),
            "l4protocol": obj.get("l4protocol"),
            "hostname": obj.get("hostname"),
            "tty": obj.get("tty"),
            "labels": obj.get("labels")
        })
        return _obj


