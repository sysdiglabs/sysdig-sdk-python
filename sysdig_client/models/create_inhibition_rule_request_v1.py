# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.label_matcher_v1 import LabelMatcherV1
from typing import Optional, Set
from typing_extensions import Self

class CreateInhibitionRuleRequestV1(BaseModel):
    """
    CreateInhibitionRuleRequestV1
    """ # noqa: E501
    is_enabled: Optional[StrictBool] = Field(default=True, description="Indicates if the inhibition rule is enabled or not.", alias="isEnabled")
    name: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="Name of the inhibition rule. If provided, must be unique.")
    description: Optional[Annotated[str, Field(strict=True, max_length=8192)]] = Field(default=None, description="Description of the inhibition rule.")
    source_matchers: Annotated[List[LabelMatcherV1], Field(min_length=1, max_length=100)] = Field(description="List of source matchers for which one or more alerts have to exist for the inhibition to take effect.", alias="sourceMatchers")
    target_matchers: Annotated[List[LabelMatcherV1], Field(min_length=1, max_length=100)] = Field(description="List of target matchers that have to be fulfilled by the target alerts to be muted.", alias="targetMatchers")
    equal: Optional[Annotated[List[Annotated[str, Field(min_length=1, strict=True, max_length=1024)]], Field(min_length=1, max_length=100)]] = Field(default=None, description="List of labels that must have an equal value in the source and target alert for the inhibition to take effect.")
    __properties: ClassVar[List[str]] = ["isEnabled", "name", "description", "sourceMatchers", "targetMatchers", "equal"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateInhibitionRuleRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in source_matchers (list)
        _items = []
        if self.source_matchers:
            for _item_source_matchers in self.source_matchers:
                if _item_source_matchers:
                    _items.append(_item_source_matchers.to_dict())
            _dict['sourceMatchers'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in target_matchers (list)
        _items = []
        if self.target_matchers:
            for _item_target_matchers in self.target_matchers:
                if _item_target_matchers:
                    _items.append(_item_target_matchers.to_dict())
            _dict['targetMatchers'] = _items
        # set to None if name (nullable) is None
        # and model_fields_set contains the field
        if self.name is None and "name" in self.model_fields_set:
            _dict['name'] = None

        # set to None if description (nullable) is None
        # and model_fields_set contains the field
        if self.description is None and "description" in self.model_fields_set:
            _dict['description'] = None

        # set to None if equal (nullable) is None
        # and model_fields_set contains the field
        if self.equal is None and "equal" in self.model_fields_set:
            _dict['equal'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateInhibitionRuleRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "isEnabled": obj.get("isEnabled") if obj.get("isEnabled") is not None else True,
            "name": obj.get("name"),
            "description": obj.get("description"),
            "sourceMatchers": [LabelMatcherV1.from_dict(_item) for _item in obj["sourceMatchers"]] if obj.get("sourceMatchers") is not None else None,
            "targetMatchers": [LabelMatcherV1.from_dict(_item) for _item in obj["targetMatchers"]] if obj.get("targetMatchers") is not None else None,
            "equal": obj.get("equal")
        })
        return _obj


