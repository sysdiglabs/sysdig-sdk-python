# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt
from typing import Any, ClassVar, Dict, List, Optional, Union
from typing import Optional, Set
from typing_extensions import Self

class UnitPricingV1(BaseModel):
    """
    The unit pricing configuration used to compute costs.
    """ # noqa: E501
    cpu: Union[StrictFloat, StrictInt] = Field(description="Hourly cost of one CPU.")
    ram: Union[StrictFloat, StrictInt] = Field(description="Hourly cost of one GB of RAM.")
    storage: Union[StrictFloat, StrictInt] = Field(description="Hourly cost of one GB of storage.")
    spot_cpu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Hourly cost of one CPU for a spot node.", alias="spotCpu")
    spot_ram: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, description="Hourly cost of one GB of RAM for a spot node.", alias="spotRam")
    __properties: ClassVar[List[str]] = ["cpu", "ram", "storage", "spotCpu", "spotRam"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UnitPricingV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if spot_cpu (nullable) is None
        # and model_fields_set contains the field
        if self.spot_cpu is None and "spot_cpu" in self.model_fields_set:
            _dict['spotCpu'] = None

        # set to None if spot_ram (nullable) is None
        # and model_fields_set contains the field
        if self.spot_ram is None and "spot_ram" in self.model_fields_set:
            _dict['spotRam'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UnitPricingV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "cpu": obj.get("cpu"),
            "ram": obj.get("ram"),
            "storage": obj.get("storage"),
            "spotCpu": obj.get("spotCpu"),
            "spotRam": obj.get("spotRam")
        })
        return _obj


