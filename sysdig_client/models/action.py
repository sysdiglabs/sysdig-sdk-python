# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sysdig_client.models.capture_action import CaptureAction
from sysdig_client.models.container_killed_action import ContainerKilledAction
from sysdig_client.models.container_paused_action import ContainerPausedAction
from sysdig_client.models.container_stopped_action import ContainerStoppedAction
from sysdig_client.models.drift_prevented_action import DriftPreventedAction
from sysdig_client.models.malware_prevented_action import MalwarePreventedAction
from sysdig_client.models.process_killed_action import ProcessKilledAction
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self
from sysdig_client.models.action_type import ActionType

ACTION_ONE_OF_SCHEMAS = ["CaptureAction", "ContainerKilledAction", "ContainerPausedAction", "ContainerStoppedAction", "DriftPreventedAction", "MalwarePreventedAction", "ProcessKilledAction"]

class Action(BaseModel):
    """
    Action performed when the event happened.
    """
    # data type: CaptureAction
    oneof_schema_1_validator: Optional[CaptureAction] = None
    # data type: ContainerPausedAction
    oneof_schema_2_validator: Optional[ContainerPausedAction] = None
    # data type: ContainerStoppedAction
    oneof_schema_3_validator: Optional[ContainerStoppedAction] = None
    # data type: ContainerKilledAction
    oneof_schema_4_validator: Optional[ContainerKilledAction] = None
    # data type: DriftPreventedAction
    oneof_schema_5_validator: Optional[DriftPreventedAction] = None
    # data type: MalwarePreventedAction
    oneof_schema_6_validator: Optional[MalwarePreventedAction] = None
    # data type: ProcessKilledAction
    oneof_schema_7_validator: Optional[ProcessKilledAction] = None
    actual_instance: Optional[Union[CaptureAction, ContainerKilledAction, ContainerPausedAction, ContainerStoppedAction, DriftPreventedAction, MalwarePreventedAction, ProcessKilledAction]] = None
    one_of_schemas: Set[str] = { "CaptureAction", "ContainerKilledAction", "ContainerPausedAction", "ContainerStoppedAction", "DriftPreventedAction", "MalwarePreventedAction", "ProcessKilledAction" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = Action.model_construct()
        error_messages = []
        match = 0
        # validate data type: CaptureAction
        if not isinstance(v, CaptureAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CaptureAction`")
        else:
            match += 1
        # validate data type: ContainerPausedAction
        if not isinstance(v, ContainerPausedAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ContainerPausedAction`")
        else:
            match += 1
        # validate data type: ContainerStoppedAction
        if not isinstance(v, ContainerStoppedAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ContainerStoppedAction`")
        else:
            match += 1
        # validate data type: ContainerKilledAction
        if not isinstance(v, ContainerKilledAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ContainerKilledAction`")
        else:
            match += 1
        # validate data type: DriftPreventedAction
        if not isinstance(v, DriftPreventedAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `DriftPreventedAction`")
        else:
            match += 1
        # validate data type: MalwarePreventedAction
        if not isinstance(v, MalwarePreventedAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `MalwarePreventedAction`")
        else:
            match += 1
        # validate data type: ProcessKilledAction
        if not isinstance(v, ProcessKilledAction):
            error_messages.append(f"Error! Input type `{type(v)}` is not `ProcessKilledAction`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in Action with oneOf schemas: CaptureAction, ContainerKilledAction, ContainerPausedAction, ContainerStoppedAction, DriftPreventedAction, MalwarePreventedAction, ProcessKilledAction. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in Action with oneOf schemas: CaptureAction, ContainerKilledAction, ContainerPausedAction, ContainerStoppedAction, DriftPreventedAction, MalwarePreventedAction, ProcessKilledAction. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0
        raw_action = json.loads(json_str)

        # deserialize data into CaptureAction
        try:
            if raw_action.get('type') == ActionType.CAPTURE :
                instance.actual_instance = CaptureAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ContainerPausedAction
        try:
            if raw_action.get('type') == ActionType.CONTAINER_PAUSED:
                instance.actual_instance = ContainerPausedAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ContainerStoppedAction
        try:
            if raw_action.get('type') == ActionType.CONTAINER_STOPPED:
                instance.actual_instance = ContainerStoppedAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ContainerKilledAction
        try:
            if raw_action.get('type') == ActionType.CONTAINER_KILLED:
                instance.actual_instance = ContainerKilledAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into DriftPreventedAction
        try:
            if raw_action.get('type') == ActionType.DRIFT_PREVENTED:
                instance.actual_instance = DriftPreventedAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into MalwarePreventedAction
        try:
            if raw_action.get('type') == ActionType.MALWARE_PREVENTED:
                instance.actual_instance = MalwarePreventedAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into ProcessKilledAction
        try:
            if raw_action.get('type') == ActionType.PROCESS_KILLED:
                instance.actual_instance = ProcessKilledAction.from_json(json_str)
                match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into Action with oneOf schemas: CaptureAction, ContainerKilledAction, ContainerPausedAction, ContainerStoppedAction, DriftPreventedAction, MalwarePreventedAction, ProcessKilledAction. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into Action with oneOf schemas: CaptureAction, ContainerKilledAction, ContainerPausedAction, ContainerStoppedAction, DriftPreventedAction, MalwarePreventedAction, ProcessKilledAction. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CaptureAction, ContainerKilledAction, ContainerPausedAction, ContainerStoppedAction, DriftPreventedAction, MalwarePreventedAction, ProcessKilledAction]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


