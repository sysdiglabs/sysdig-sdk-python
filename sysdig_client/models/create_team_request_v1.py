# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.additional_team_permissions_v1 import AdditionalTeamPermissionsV1
from sysdig_client.models.product import Product
from sysdig_client.models.scope_v1 import ScopeV1
from sysdig_client.models.team_role_v1 import TeamRoleV1
from sysdig_client.models.ui_settings_v1 import UiSettingsV1
from typing import Optional, Set
from typing_extensions import Self

class CreateTeamRequestV1(BaseModel):
    """
    CreateTeamRequestV1
    """ # noqa: E501
    name: Annotated[str, Field(min_length=1, strict=True, max_length=256)] = Field(description="The name of the team. It must be unique.")
    description: Optional[Annotated[str, Field(strict=True, max_length=2048)]] = Field(default=None, description="A longer description of the team explaining what is it used for.")
    is_default_team: Optional[StrictBool] = Field(default=None, description="Specifies if the team is the default team. The default team is used to automatically assign new users to a team.", alias="isDefaultTeam")
    standard_team_role: Optional[TeamRoleV1] = Field(default=None, description="The standard team role assigned by default to users added to this team. **Mutually exclusive with customTeamRoleId**.\\ \\ *ROLE_TEAM_SERVICE_MANAGER is only supported in Secure.* ", alias="standardTeamRole")
    custom_team_role_id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The custom team role assigned by default to users added to this team. **Mutually exclusive with standardTeamRoleId**. ", alias="customTeamRoleId")
    product: Product = Field(description="The product to which the team is assigned to. Teams can only be part of a single product at a time.")
    ui_settings: Optional[UiSettingsV1] = Field(default=None, alias="uiSettings")
    is_all_zones: Optional[StrictBool] = Field(default=None, description="**True** if the users that are members of this team have access to all zones. **Mutually exclusive with zoneIds**.\\ \\ _Only supported in Secure features._ ", alias="isAllZones")
    zone_ids: Optional[Annotated[List[Annotated[int, Field(strict=True, ge=0)]], Field(max_length=8192)]] = Field(default=None, description="The list of zones that users assigned to this team will have access to. **Mutually exclusive with allZones**.\\ \\ _Only supported in Secure features._ ", alias="zoneIds")
    scopes: Optional[Annotated[List[ScopeV1], Field(max_length=512)]] = Field(default=None, description="Scopes is a list of different scope types and filter values that will be applied to resources when accessed through the team. ")
    additional_team_permissions: Optional[AdditionalTeamPermissionsV1] = Field(default=None, alias="additionalTeamPermissions")
    __properties: ClassVar[List[str]] = ["name", "description", "isDefaultTeam", "standardTeamRole", "customTeamRoleId", "product", "uiSettings", "isAllZones", "zoneIds", "scopes", "additionalTeamPermissions"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of CreateTeamRequestV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of ui_settings
        if self.ui_settings:
            _dict['uiSettings'] = self.ui_settings.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in scopes (list)
        _items = []
        if self.scopes:
            for _item_scopes in self.scopes:
                if _item_scopes:
                    _items.append(_item_scopes.to_dict())
            _dict['scopes'] = _items
        # override the default output from pydantic by calling `to_dict()` of additional_team_permissions
        if self.additional_team_permissions:
            _dict['additionalTeamPermissions'] = self.additional_team_permissions.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of CreateTeamRequestV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "description": obj.get("description"),
            "isDefaultTeam": obj.get("isDefaultTeam"),
            "standardTeamRole": obj.get("standardTeamRole"),
            "customTeamRoleId": obj.get("customTeamRoleId"),
            "product": obj.get("product"),
            "uiSettings": UiSettingsV1.from_dict(obj["uiSettings"]) if obj.get("uiSettings") is not None else None,
            "isAllZones": obj.get("isAllZones"),
            "zoneIds": obj.get("zoneIds"),
            "scopes": [ScopeV1.from_dict(_item) for _item in obj["scopes"]] if obj.get("scopes") is not None else None,
            "additionalTeamPermissions": AdditionalTeamPermissionsV1.from_dict(obj["additionalTeamPermissions"]) if obj.get("additionalTeamPermissions") is not None else None
        })
        return _obj


