# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import date
from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.cvss_score import CvssScore
from sysdig_client.models.exploit import Exploit
from typing import Optional, Set
from typing_extensions import Self

class Vulnerability(BaseModel):
    """
    Vulnerability
    """ # noqa: E501
    name: Annotated[str, Field(strict=True, max_length=255)]
    severity: StrictStr
    cvss_score: CvssScore = Field(alias="cvssScore")
    disclosure_date: Optional[date] = Field(default=None, alias="disclosureDate")
    solution_date: Optional[date] = Field(default=None, alias="solutionDate")
    exploitable: StrictBool
    exploit: Optional[Exploit] = None
    fix_version: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="fixVersion")
    main_provider: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, alias="mainProvider")
    package_ref: Optional[Annotated[str, Field(strict=True, max_length=255)]] = Field(default=None, description="reference to the affected package", alias="packageRef")
    risk_accept_refs: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=255)]], Field(min_length=0, max_length=2147483647)]] = Field(default=None, alias="riskAcceptRefs")
    providers_metadata: Optional[Dict[str, Any]] = Field(default=None, alias="providersMetadata")
    cisa_kev: Optional[Dict[str, Any]] = Field(default=None, alias="cisaKev")
    __properties: ClassVar[List[str]] = ["name", "severity", "cvssScore", "disclosureDate", "solutionDate", "exploitable", "exploit", "fixVersion", "mainProvider", "packageRef", "riskAcceptRefs", "providersMetadata", "cisaKev"]

    @field_validator('severity')
    def severity_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['critical', 'high', 'medium', 'low', 'negligible']):
            raise ValueError("must be one of enum values ('critical', 'high', 'medium', 'low', 'negligible')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Vulnerability from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of cvss_score
        if self.cvss_score:
            _dict['cvssScore'] = self.cvss_score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of exploit
        if self.exploit:
            _dict['exploit'] = self.exploit.to_dict()
        # set to None if risk_accept_refs (nullable) is None
        # and model_fields_set contains the field
        if self.risk_accept_refs is None and "risk_accept_refs" in self.model_fields_set:
            _dict['riskAcceptRefs'] = None

        # set to None if providers_metadata (nullable) is None
        # and model_fields_set contains the field
        if self.providers_metadata is None and "providers_metadata" in self.model_fields_set:
            _dict['providersMetadata'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Vulnerability from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "name": obj.get("name"),
            "severity": obj.get("severity"),
            "cvssScore": CvssScore.from_dict(obj["cvssScore"]) if obj.get("cvssScore") is not None else None,
            "disclosureDate": obj.get("disclosureDate"),
            "solutionDate": obj.get("solutionDate"),
            "exploitable": obj.get("exploitable"),
            "exploit": Exploit.from_dict(obj["exploit"]) if obj.get("exploit") is not None else None,
            "fixVersion": obj.get("fixVersion"),
            "mainProvider": obj.get("mainProvider"),
            "packageRef": obj.get("packageRef"),
            "riskAcceptRefs": obj.get("riskAcceptRefs"),
            "providersMetadata": obj.get("providersMetadata"),
            "cisaKev": obj.get("cisaKev")
        })
        return _obj


