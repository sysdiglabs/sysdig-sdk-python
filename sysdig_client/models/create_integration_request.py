# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
import pprint
from pydantic import BaseModel, ConfigDict, Field, StrictStr, ValidationError, field_validator
from typing import Any, List, Optional
from sysdig_client.models.create_amazon_sqs_integration_request import CreateAmazonSqsIntegrationRequest
from sysdig_client.models.create_chronicle_integration_request import CreateChronicleIntegrationRequest
from sysdig_client.models.create_elasticsearch_integration_request import CreateElasticsearchIntegrationRequest
from sysdig_client.models.create_google_pub_sub_integration_request import CreateGooglePubSubIntegrationRequest
from sysdig_client.models.create_google_scc_integration_request import CreateGoogleSccIntegrationRequest
from sysdig_client.models.create_kafka_integration_request import CreateKafkaIntegrationRequest
from sysdig_client.models.create_mcm_integration_request import CreateMcmIntegrationRequest
from sysdig_client.models.create_microsoft_sentinel_integration_request import CreateMicrosoftSentinelIntegrationRequest
from sysdig_client.models.create_qradar_integration_request import CreateQradarIntegrationRequest
from sysdig_client.models.create_splunk_integration_request import CreateSplunkIntegrationRequest
from sysdig_client.models.create_syslog_integration_request import CreateSyslogIntegrationRequest
from sysdig_client.models.create_webhook_integration_request import CreateWebhookIntegrationRequest
from pydantic import StrictStr, Field
from typing import Union, List, Set, Optional, Dict
from typing_extensions import Literal, Self

CREATEINTEGRATIONREQUEST_ONE_OF_SCHEMAS = ["CreateAmazonSqsIntegrationRequest", "CreateChronicleIntegrationRequest", "CreateElasticsearchIntegrationRequest", "CreateGooglePubSubIntegrationRequest", "CreateGoogleSccIntegrationRequest", "CreateKafkaIntegrationRequest", "CreateMcmIntegrationRequest", "CreateMicrosoftSentinelIntegrationRequest", "CreateQradarIntegrationRequest", "CreateSplunkIntegrationRequest", "CreateSyslogIntegrationRequest", "CreateWebhookIntegrationRequest"]

class CreateIntegrationRequest(BaseModel):
    """
    Create Integration Request
    """
    # data type: CreateChronicleIntegrationRequest
    oneof_schema_1_validator: Optional[CreateChronicleIntegrationRequest] = None
    # data type: CreateElasticsearchIntegrationRequest
    oneof_schema_2_validator: Optional[CreateElasticsearchIntegrationRequest] = None
    # data type: CreateGooglePubSubIntegrationRequest
    oneof_schema_3_validator: Optional[CreateGooglePubSubIntegrationRequest] = None
    # data type: CreateKafkaIntegrationRequest
    oneof_schema_4_validator: Optional[CreateKafkaIntegrationRequest] = None
    # data type: CreateMcmIntegrationRequest
    oneof_schema_5_validator: Optional[CreateMcmIntegrationRequest] = None
    # data type: CreateQradarIntegrationRequest
    oneof_schema_6_validator: Optional[CreateQradarIntegrationRequest] = None
    # data type: CreateGoogleSccIntegrationRequest
    oneof_schema_7_validator: Optional[CreateGoogleSccIntegrationRequest] = None
    # data type: CreateMicrosoftSentinelIntegrationRequest
    oneof_schema_8_validator: Optional[CreateMicrosoftSentinelIntegrationRequest] = None
    # data type: CreateSplunkIntegrationRequest
    oneof_schema_9_validator: Optional[CreateSplunkIntegrationRequest] = None
    # data type: CreateSyslogIntegrationRequest
    oneof_schema_10_validator: Optional[CreateSyslogIntegrationRequest] = None
    # data type: CreateAmazonSqsIntegrationRequest
    oneof_schema_11_validator: Optional[CreateAmazonSqsIntegrationRequest] = None
    # data type: CreateWebhookIntegrationRequest
    oneof_schema_12_validator: Optional[CreateWebhookIntegrationRequest] = None
    actual_instance: Optional[Union[CreateAmazonSqsIntegrationRequest, CreateChronicleIntegrationRequest, CreateElasticsearchIntegrationRequest, CreateGooglePubSubIntegrationRequest, CreateGoogleSccIntegrationRequest, CreateKafkaIntegrationRequest, CreateMcmIntegrationRequest, CreateMicrosoftSentinelIntegrationRequest, CreateQradarIntegrationRequest, CreateSplunkIntegrationRequest, CreateSyslogIntegrationRequest, CreateWebhookIntegrationRequest]] = None
    one_of_schemas: Set[str] = { "CreateAmazonSqsIntegrationRequest", "CreateChronicleIntegrationRequest", "CreateElasticsearchIntegrationRequest", "CreateGooglePubSubIntegrationRequest", "CreateGoogleSccIntegrationRequest", "CreateKafkaIntegrationRequest", "CreateMcmIntegrationRequest", "CreateMicrosoftSentinelIntegrationRequest", "CreateQradarIntegrationRequest", "CreateSplunkIntegrationRequest", "CreateSyslogIntegrationRequest", "CreateWebhookIntegrationRequest" }

    model_config = ConfigDict(
        validate_assignment=True,
        protected_namespaces=(),
    )


    discriminator_value_class_map: Dict[str, str] = {
    }

    def __init__(self, *args, **kwargs) -> None:
        if args:
            if len(args) > 1:
                raise ValueError("If a position argument is used, only 1 is allowed to set `actual_instance`")
            if kwargs:
                raise ValueError("If a position argument is used, keyword arguments cannot be used.")
            super().__init__(actual_instance=args[0])
        else:
            super().__init__(**kwargs)

    @field_validator('actual_instance')
    def actual_instance_must_validate_oneof(cls, v):
        instance = CreateIntegrationRequest.model_construct()
        error_messages = []
        match = 0
        # validate data type: CreateChronicleIntegrationRequest
        if not isinstance(v, CreateChronicleIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateChronicleIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateElasticsearchIntegrationRequest
        if not isinstance(v, CreateElasticsearchIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateElasticsearchIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateGooglePubSubIntegrationRequest
        if not isinstance(v, CreateGooglePubSubIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateGooglePubSubIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateKafkaIntegrationRequest
        if not isinstance(v, CreateKafkaIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateKafkaIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateMcmIntegrationRequest
        if not isinstance(v, CreateMcmIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateMcmIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateQradarIntegrationRequest
        if not isinstance(v, CreateQradarIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateQradarIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateGoogleSccIntegrationRequest
        if not isinstance(v, CreateGoogleSccIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateGoogleSccIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateMicrosoftSentinelIntegrationRequest
        if not isinstance(v, CreateMicrosoftSentinelIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateMicrosoftSentinelIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateSplunkIntegrationRequest
        if not isinstance(v, CreateSplunkIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateSplunkIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateSyslogIntegrationRequest
        if not isinstance(v, CreateSyslogIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateSyslogIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateAmazonSqsIntegrationRequest
        if not isinstance(v, CreateAmazonSqsIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateAmazonSqsIntegrationRequest`")
        else:
            match += 1
        # validate data type: CreateWebhookIntegrationRequest
        if not isinstance(v, CreateWebhookIntegrationRequest):
            error_messages.append(f"Error! Input type `{type(v)}` is not `CreateWebhookIntegrationRequest`")
        else:
            match += 1
        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when setting `actual_instance` in CreateIntegrationRequest with oneOf schemas: CreateAmazonSqsIntegrationRequest, CreateChronicleIntegrationRequest, CreateElasticsearchIntegrationRequest, CreateGooglePubSubIntegrationRequest, CreateGoogleSccIntegrationRequest, CreateKafkaIntegrationRequest, CreateMcmIntegrationRequest, CreateMicrosoftSentinelIntegrationRequest, CreateQradarIntegrationRequest, CreateSplunkIntegrationRequest, CreateSyslogIntegrationRequest, CreateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when setting `actual_instance` in CreateIntegrationRequest with oneOf schemas: CreateAmazonSqsIntegrationRequest, CreateChronicleIntegrationRequest, CreateElasticsearchIntegrationRequest, CreateGooglePubSubIntegrationRequest, CreateGoogleSccIntegrationRequest, CreateKafkaIntegrationRequest, CreateMcmIntegrationRequest, CreateMicrosoftSentinelIntegrationRequest, CreateQradarIntegrationRequest, CreateSplunkIntegrationRequest, CreateSyslogIntegrationRequest, CreateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        else:
            return v

    @classmethod
    def from_dict(cls, obj: Union[str, Dict[str, Any]]) -> Self:
        return cls.from_json(json.dumps(obj))

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Returns the object represented by the json string"""
        instance = cls.model_construct()
        error_messages = []
        match = 0

        # deserialize data into CreateChronicleIntegrationRequest
        try:
            instance.actual_instance = CreateChronicleIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateElasticsearchIntegrationRequest
        try:
            instance.actual_instance = CreateElasticsearchIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateGooglePubSubIntegrationRequest
        try:
            instance.actual_instance = CreateGooglePubSubIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateKafkaIntegrationRequest
        try:
            instance.actual_instance = CreateKafkaIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateMcmIntegrationRequest
        try:
            instance.actual_instance = CreateMcmIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateQradarIntegrationRequest
        try:
            instance.actual_instance = CreateQradarIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateGoogleSccIntegrationRequest
        try:
            instance.actual_instance = CreateGoogleSccIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateMicrosoftSentinelIntegrationRequest
        try:
            instance.actual_instance = CreateMicrosoftSentinelIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateSplunkIntegrationRequest
        try:
            instance.actual_instance = CreateSplunkIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateSyslogIntegrationRequest
        try:
            instance.actual_instance = CreateSyslogIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateAmazonSqsIntegrationRequest
        try:
            instance.actual_instance = CreateAmazonSqsIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))
        # deserialize data into CreateWebhookIntegrationRequest
        try:
            instance.actual_instance = CreateWebhookIntegrationRequest.from_json(json_str)
            match += 1
        except (ValidationError, ValueError) as e:
            error_messages.append(str(e))

        if match > 1:
            # more than 1 match
            raise ValueError("Multiple matches found when deserializing the JSON string into CreateIntegrationRequest with oneOf schemas: CreateAmazonSqsIntegrationRequest, CreateChronicleIntegrationRequest, CreateElasticsearchIntegrationRequest, CreateGooglePubSubIntegrationRequest, CreateGoogleSccIntegrationRequest, CreateKafkaIntegrationRequest, CreateMcmIntegrationRequest, CreateMicrosoftSentinelIntegrationRequest, CreateQradarIntegrationRequest, CreateSplunkIntegrationRequest, CreateSyslogIntegrationRequest, CreateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        elif match == 0:
            # no match
            raise ValueError("No match found when deserializing the JSON string into CreateIntegrationRequest with oneOf schemas: CreateAmazonSqsIntegrationRequest, CreateChronicleIntegrationRequest, CreateElasticsearchIntegrationRequest, CreateGooglePubSubIntegrationRequest, CreateGoogleSccIntegrationRequest, CreateKafkaIntegrationRequest, CreateMcmIntegrationRequest, CreateMicrosoftSentinelIntegrationRequest, CreateQradarIntegrationRequest, CreateSplunkIntegrationRequest, CreateSyslogIntegrationRequest, CreateWebhookIntegrationRequest. Details: " + ", ".join(error_messages))
        else:
            return instance

    def to_json(self) -> str:
        """Returns the JSON representation of the actual instance"""
        if self.actual_instance is None:
            return "null"

        if hasattr(self.actual_instance, "to_json") and callable(self.actual_instance.to_json):
            return self.actual_instance.to_json()
        else:
            return json.dumps(self.actual_instance)

    def to_dict(self) -> Optional[Union[Dict[str, Any], CreateAmazonSqsIntegrationRequest, CreateChronicleIntegrationRequest, CreateElasticsearchIntegrationRequest, CreateGooglePubSubIntegrationRequest, CreateGoogleSccIntegrationRequest, CreateKafkaIntegrationRequest, CreateMcmIntegrationRequest, CreateMicrosoftSentinelIntegrationRequest, CreateQradarIntegrationRequest, CreateSplunkIntegrationRequest, CreateSyslogIntegrationRequest, CreateWebhookIntegrationRequest]]:
        """Returns the dict representation of the actual instance"""
        if self.actual_instance is None:
            return None

        if hasattr(self.actual_instance, "to_dict") and callable(self.actual_instance.to_dict):
            return self.actual_instance.to_dict()
        else:
            # primitive type
            return self.actual_instance

    def to_str(self) -> str:
        """Returns the string representation of the actual instance"""
        return pprint.pformat(self.model_dump())


