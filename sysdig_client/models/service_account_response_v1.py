# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class ServiceAccountResponseV1(BaseModel):
    """
    ServiceAccountResponseV1
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="Service Account display name.")
    date_created: Optional[datetime] = Field(default=None, description="Date and time when the Service Account was created.", alias="dateCreated")
    last_updated: Optional[datetime] = Field(default=None, description="Date and time when the Service Account was last updated.", alias="lastUpdated")
    last_used: Optional[datetime] = Field(default=None, description="Date and time when the Service Account API key was last used.", alias="lastUsed")
    expiration_date: Optional[datetime] = Field(default=None, description="Date and time when the Service Account API key expires.", alias="expirationDate")
    team_id: Optional[Annotated[int, Field(le=9223372036854775616, strict=True, ge=1)]] = Field(default=None, description="Team ID of the team the service account is associated with.", alias="teamId")
    team_role: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The predefined team role for a Service Account, or an ID of a custom role.", alias="teamRole")
    system_roles: Optional[Annotated[List[Annotated[str, Field(strict=True, max_length=128)]], Field(min_length=1, max_length=20)]] = Field(default=None, description="Array of System roles assigned to the global service account.", alias="systemRoles")
    __properties: ClassVar[List[str]] = ["id", "name", "dateCreated", "lastUpdated", "lastUsed", "expirationDate", "teamId", "teamRole", "systemRoles"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ServiceAccountResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ServiceAccountResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "dateCreated": obj.get("dateCreated"),
            "lastUpdated": obj.get("lastUpdated"),
            "lastUsed": obj.get("lastUsed"),
            "expirationDate": obj.get("expirationDate"),
            "teamId": obj.get("teamId"),
            "teamRole": obj.get("teamRole"),
            "systemRoles": obj.get("systemRoles")
        })
        return _obj


