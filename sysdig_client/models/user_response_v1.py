# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictBool
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from typing import Optional, Set
from typing_extensions import Self

class UserResponseV1(BaseModel):
    """
    UserResponseV1
    """ # noqa: E501
    id: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description=" ")
    email: Optional[Annotated[str, Field(strict=True, max_length=512)]] = Field(default=None, description="The email address of the user. ")
    first_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The name of the user. ", alias="firstName")
    last_name: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The last name of the user. ", alias="lastName")
    is_admin: Optional[StrictBool] = Field(default=None, description="**True** if the user has Administration permissions. ", alias="isAdmin")
    activation_status: Optional[Annotated[str, Field(strict=True, max_length=256)]] = Field(default=None, description="The current activation status of the user. ", alias="activationStatus")
    date_created: Optional[datetime] = Field(default=None, description="The date and time when the user was created. ", alias="dateCreated")
    last_updated: Optional[datetime] = Field(default=None, description="The date and time when the user was last updated. ", alias="lastUpdated")
    version: Optional[Annotated[int, Field(strict=True, ge=0)]] = Field(default=None, description="The current version of the resource. ")
    __properties: ClassVar[List[str]] = ["id", "email", "firstName", "lastName", "isAdmin", "activationStatus", "dateCreated", "lastUpdated", "version"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of UserResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if first_name (nullable) is None
        # and model_fields_set contains the field
        if self.first_name is None and "first_name" in self.model_fields_set:
            _dict['firstName'] = None

        # set to None if last_name (nullable) is None
        # and model_fields_set contains the field
        if self.last_name is None and "last_name" in self.model_fields_set:
            _dict['lastName'] = None

        # set to None if last_updated (nullable) is None
        # and model_fields_set contains the field
        if self.last_updated is None and "last_updated" in self.model_fields_set:
            _dict['lastUpdated'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of UserResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "email": obj.get("email"),
            "firstName": obj.get("firstName"),
            "lastName": obj.get("lastName"),
            "isAdmin": obj.get("isAdmin"),
            "activationStatus": obj.get("activationStatus"),
            "dateCreated": obj.get("dateCreated"),
            "lastUpdated": obj.get("lastUpdated"),
            "version": obj.get("version")
        })
        return _obj


