# coding: utf-8

"""
    Sysdig Secure Client API

    Sysdig Secure Client API.

    The version of the OpenAPI document: 1.1.1
    Contact: info@sysdig.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from typing_extensions import Annotated
from sysdig_client.models.issue_type_field_response_v1_allowed_values_inner import IssueTypeFieldResponseV1AllowedValuesInner
from typing import Optional, Set
from typing_extensions import Self

class IssueTypeFieldResponseV1(BaseModel):
    """
    IssueTypeFieldResponseV1
    """ # noqa: E501
    id: Annotated[int, Field(strict=True, ge=0)] = Field(description="Issue type field id.")
    jira_id: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Issue type field id on Jira.", alias="jiraId")
    jira_name: Annotated[str, Field(strict=True, max_length=512)] = Field(description="Jira issue type field name.", alias="jiraName")
    type: StrictStr = Field(description="Issue type field type.")
    is_required: StrictBool = Field(description="Indicates if the field is required.", alias="isRequired")
    has_default_value: StrictBool = Field(description="Indicates if the field has a default value.", alias="hasDefaultValue")
    allowed_values: Optional[Annotated[List[IssueTypeFieldResponseV1AllowedValuesInner], Field(max_length=500)]] = Field(default=None, description="Allowed values for the field.", alias="allowedValues")
    __properties: ClassVar[List[str]] = ["id", "jiraId", "jiraName", "type", "isRequired", "hasDefaultValue", "allowedValues"]

    @field_validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in set(['user', 'checkbox', 'number', 'label', 'text', 'document']):
            raise ValueError("must be one of enum values ('user', 'checkbox', 'number', 'label', 'text', 'document')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of IssueTypeFieldResponseV1 from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in allowed_values (list)
        _items = []
        if self.allowed_values:
            for _item_allowed_values in self.allowed_values:
                if _item_allowed_values:
                    _items.append(_item_allowed_values.to_dict())
            _dict['allowedValues'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of IssueTypeFieldResponseV1 from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "jiraId": obj.get("jiraId"),
            "jiraName": obj.get("jiraName"),
            "type": obj.get("type"),
            "isRequired": obj.get("isRequired"),
            "hasDefaultValue": obj.get("hasDefaultValue"),
            "allowedValues": [IssueTypeFieldResponseV1AllowedValuesInner.from_dict(_item) for _item in obj["allowedValues"]] if obj.get("allowedValues") is not None else None
        })
        return _obj


